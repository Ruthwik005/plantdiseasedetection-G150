{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chama\\\\OneDrive\\\\Desktop\\\\plantdiseasedetection1\\\\Frontend\\\\src\\\\Components\\\\ResetPassword.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom'; // To get email from the location state and navigate\nimport './ResetPassword.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResetPassword = () => {\n  _s();\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const location = useLocation(); // Get location state from previous page (OTP verification)\n  const {\n    email\n  } = location.state; // Get email from OTPVerification page\n  const navigate = useNavigate(); // For redirection after successful password reset\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validate that passwords match\n    if (newPassword !== confirmPassword) {\n      setMessage(\"Passwords do not match.\");\n      return;\n    }\n    setSubmitted(true);\n    try {\n      // Send request to reset password with email and new password\n      // const res = await fetch('http://localhost:8080/reset-password', {\n      //     method: 'POST',\n      //     headers: { 'Content-Type': 'application/json' },\n      //     body: JSON.stringify({ email, newPassword })\n      // });\n      const res = await axios.post('http://localhost:8080/reset-password', {\n        email,\n        newPassword\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await res.json();\n      if (res.ok) {\n        setMessage(\"Password has been reset successfully! Redirecting to login...\");\n        setTimeout(() => navigate('/login'), 2000); // Redirect after 2 seconds\n      } else {\n        setMessage(data.message || 'Failed to reset password.');\n        setSubmitted(false);\n      }\n    } catch (error) {\n      setMessage('Failed to reset password. Please try again.');\n      setSubmitted(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reset-password-container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"reset-password-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter a new password for your account.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"message\",\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"New Password\",\n        value: newPassword,\n        onChange: e => setNewPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Confirm New Password\",\n        value: confirmPassword,\n        onChange: e => setConfirmPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: submitted,\n        children: submitted ? 'Resetting...' : 'Reset Password'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(ResetPassword, \"VBjO1g/pM7NFhky/cgPXSU3frvM=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","useLocation","useNavigate","jsxDEV","_jsxDEV","ResetPassword","_s","newPassword","setNewPassword","confirmPassword","setConfirmPassword","message","setMessage","submitted","setSubmitted","location","email","state","navigate","handleSubmit","e","preventDefault","res","axios","post","headers","data","json","ok","setTimeout","error","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","required","disabled","_c","$RefreshReg$"],"sources":["C:/Users/chama/OneDrive/Desktop/plantdiseasedetection1/Frontend/src/Components/ResetPassword.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom'; // To get email from the location state and navigate\r\nimport './ResetPassword.css';\r\n\r\nconst ResetPassword = () => {\r\n    const [newPassword, setNewPassword] = useState('');\r\n    const [confirmPassword, setConfirmPassword] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [submitted, setSubmitted] = useState(false);\r\n\r\n    const location = useLocation(); // Get location state from previous page (OTP verification)\r\n    const { email } = location.state; // Get email from OTPVerification page\r\n    const navigate = useNavigate(); // For redirection after successful password reset\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        // Validate that passwords match\r\n        if (newPassword !== confirmPassword) {\r\n            setMessage(\"Passwords do not match.\");\r\n            return;\r\n        }\r\n\r\n        setSubmitted(true);\r\n\r\n        try {\r\n            // Send request to reset password with email and new password\r\n            // const res = await fetch('http://localhost:8080/reset-password', {\r\n            //     method: 'POST',\r\n            //     headers: { 'Content-Type': 'application/json' },\r\n            //     body: JSON.stringify({ email, newPassword })\r\n            // });\r\n            const res = await axios.post('http://localhost:8080/reset-password', {\r\n                email,\r\n                newPassword,\r\n              }, {\r\n                headers: { 'Content-Type': 'application/json' },\r\n              });\r\n            const data = await res.json();\r\n\r\n            if (res.ok) {\r\n                setMessage(\"Password has been reset successfully! Redirecting to login...\");\r\n                setTimeout(() => navigate('/login'), 2000); // Redirect after 2 seconds\r\n            } else {\r\n                setMessage(data.message || 'Failed to reset password.');\r\n                setSubmitted(false);\r\n            }\r\n        } catch (error) {\r\n            setMessage('Failed to reset password. Please try again.');\r\n            setSubmitted(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"reset-password-container\">\r\n            <form onSubmit={handleSubmit} className=\"reset-password-form\">\r\n                <h2>Reset Password</h2>\r\n                <p>Enter a new password for your account.</p>\r\n                \r\n                {/* Show success or error message */}\r\n                {message && <p className=\"message\">{message}</p>}\r\n                \r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"New Password\"\r\n                    value={newPassword}\r\n                    onChange={(e) => setNewPassword(e.target.value)}\r\n                    required\r\n                />\r\n                <input\r\n                    type=\"password\"\r\n                    placeholder=\"Confirm New Password\"\r\n                    value={confirmPassword}\r\n                    onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    required\r\n                />\r\n                \r\n                <button type=\"submit\" disabled={submitted}>\r\n                    {submitted ? 'Resetting...' : 'Reset Password'}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}