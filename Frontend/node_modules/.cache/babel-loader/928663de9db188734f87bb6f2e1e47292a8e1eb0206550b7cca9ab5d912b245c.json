{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chama\\\\OneDrive\\\\Desktop\\\\plantdiseasedetection1\\\\Frontend\\\\src\\\\Components\\\\SignUp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { handleSuccess, handleError } from '../utils.js';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport axios from 'axios';\nimport './SignUp.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SignUp() {\n  _s();\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [usernameError, setUsernameError] = useState('');\n  const [apiError, setApiError] = useState(''); // State for API error messages\n  const navigate = useNavigate();\n\n  // Google Login function\n  const loginWithGoogle = () => {\n    window.open(\"http://localhost:8080/auth/google\", \"_self\");\n  };\n\n  // Handle form submit for normal signup\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const formData = {\n      username,\n      email,\n      password\n    };\n    if (username.trim() === '') {\n      setUsernameError('Username is required');\n      return;\n    } else {\n      setUsernameError('');\n    }\n    try {\n      const response = await fetch('http://localhost:8080/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const data = await response.json();\n      const {\n        success,\n        message,\n        user\n      } = data;\n      if (response.ok && success) {\n        handleSuccess(message);\n        setTimeout(() => {\n          navigate('/login');\n        }, 2000);\n      } else {\n        if (Array.isArray(message)) {\n          setApiError(message.join(\", \"));\n        } else {\n          setApiError(message || 'An error occurred. Please try again later.');\n        }\n      }\n    } catch (error) {\n      handleError('An error occurred. Please try again later.');\n    }\n  };\n  useEffect(() => {\n    // If the user is already logged in (for example after a Google login), redirect them to the home page.\n    const token = localStorage.getItem('token');\n    if (token) {\n      navigate('/'); // Or wherever you want to redirect users when already logged in\n    }\n  }, [navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"signup-page\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"signup-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"sign-up-heading\",\n        children: \"Get Started\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form-container\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            className: \"signup-label\",\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            className: \"signup-input\",\n            placeholder: \"Enter your username\",\n            required: true,\n            value: username,\n            onChange: e => setUsername(e.target.value),\n            autoFocus: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), usernameError && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error-text\",\n            children: usernameError\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 31\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            className: \"signup-label\",\n            children: \"Email Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            id: \"email\",\n            className: \"signup-input\",\n            placeholder: \"Enter your email\",\n            required: true,\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            className: \"signup-label\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            id: \"password\",\n            className: \"signup-input\",\n            placeholder: \"Enter your password\",\n            required: true,\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), apiError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          style: {\n            color: 'red'\n          },\n          children: apiError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"signup-btn\",\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"or-text\",\n        children: \"or\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"social-buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"social-btn\",\n          style: {\n            backgroundColor: '#f0f0f0'\n          },\n          onClick: loginWithGoogle,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS6WwgH7Nl5_AW9nDCnR2Ozb_AU3rkIbSJdAg&s\",\n            alt: \"Google\",\n            className: \"social-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this), \"Google\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/login\",\n          className: \"link-button\",\n          children: \"Have an account? Log in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(SignUp, \"YlOZbiyoMaEpHyv/leiM9nKOlEg=\", false, function () {\n  return [useNavigate];\n});\n_c = SignUp;\nexport default SignUp;\n\n// import React, { useState, useEffect } from 'react';\n// import { handleSuccess, handleError } from '../utils.js';\n// import { Link, useNavigate } from 'react-router-dom';\n// import { ToastContainer } from 'react-toastify';\n// import './SignUp.css';\n\n// function SignUp() {\n//   const [username, setUsername] = useState('');\n//   const [email, setEmail] = useState('');\n//   const [password, setPassword] = useState('');\n//   const [usernameError, setUsernameError] = useState('');\n//   const [apiError, setApiError] = useState(''); // State for API error messages\n//   const navigate = useNavigate();\n\n//   // Google Login function\n//   const loginWithGoogle = () => {\n//     window.open(\"http://localhost:8080/auth/google\", \"_self\");\n//   };\n\n//   // Handle form submit for normal signup\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n//     const formData = { username, email, password };\n\n//     // Simple validation for username\n//     if (username.trim() === '') {\n//       setUsernameError('Username is required');\n//       return;\n//     } else {\n//       setUsernameError(''); // Clear error if valid\n//     }\n\n//     try {\n//       const response = await fetch('http://localhost:8080/auth/signup', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(formData),\n//       });\n\n//       const data = await response.json();\n//       console.log(data); // Log response for debugging\n\n//       const { success, message } = data;\n\n//       if (response.ok && success) {\n//         handleSuccess(message);\n\n//         // Redirect to login page\n//         setTimeout(() => {\n//           navigate('/login');\n//         }, 2000);\n//       } else {\n//         if (message) {\n//           // Set API error message from backend validation errors\n//           setApiError(message); // Join array of error messages into one string\n//         } else {\n//           // Display general error message from backend\n//           setApiError(message || 'An error occurred. Please try again later.');\n//         }\n//       }\n//     } catch (message) {\n//       //console.error('Error:', message);\n//       handleError('An error occurred. Please try again later.');\n//     }\n//   };\n\n//   useEffect(() => {\n//     // If the user is already logged in (for example after a Google login), redirect them to the home page.\n//     const token = localStorage.getItem('token');\n//     if (token) {\n//       navigate('/'); // Or wherever you want to redirect users when already logged in\n//     }\n//   }, [navigate]);\n\n//   return (\n//     <div className=\"signup-page\">\n//       <div className=\"signup-container\">\n//         <h1 className=\"sign-up-heading\">Get Started</h1>\n//         <form className=\"form-container\" onSubmit={handleSubmit}>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"name\" className=\"signup-label\">Username</label>\n//             <input\n//               type=\"text\"\n//               id=\"name\"\n//               className=\"signup-input\"\n//               placeholder=\"Enter your username\"\n//               required\n//               value={username}\n//               onChange={(e) => setUsername(e.target.value)}\n//               autoFocus\n//             />\n//             {usernameError && <span className=\"error-text\">{usernameError}</span>}\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"email\" className=\"signup-label\">Email Address</label>\n//             <input\n//               type=\"email\"\n//               id=\"email\"\n//               className=\"signup-input\"\n//               placeholder=\"Enter your email\"\n//               required\n//               value={email}\n//               onChange={(e) => setEmail(e.target.value)}\n//             />\n//           </div>\n//           <div className=\"form-group\">\n//             <label htmlFor=\"password\" className=\"signup-label\">Password</label>\n//             <input\n//               type=\"password\"\n//               id=\"password\"\n//               className=\"signup-input\"\n//               placeholder=\"Enter your password\"\n//               required\n//               value={password}\n//               onChange={(e) => setPassword(e.target.value)}\n//             />\n//           </div>\n\n//           {/* Display the API error message if it exists */}\n//           {apiError && <p className=\"error-text\" style={{ color: 'red' }}>{apiError}</p>}\n\n//           <button type=\"submit\" className=\"signup-btn\">Sign Up</button>\n//         </form>\n//         <ToastContainer />\n//         <p className=\"or-text\">or</p>\n//         <div className=\"social-buttons\">\n//           <button className=\"social-btn\" style={{ backgroundColor: '#f0f0f0' }} onClick={loginWithGoogle}>\n//             <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS6WwgH7Nl5_AW9nDCnR2Ozb_AU3rkIbSJdAg&s\" alt=\"Google\" className=\"social-icon\" />\n//               Google\n//           </button>\n//         </div>\n//         <div className=\"text-center\">\n//           <Link to=\"/login\" className=\"link-button\">Have an account? Log in</Link>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default SignUp;\nvar _c;\n$RefreshReg$(_c, \"SignUp\");","map":{"version":3,"names":["React","useState","useEffect","handleSuccess","handleError","Link","useNavigate","ToastContainer","axios","jsxDEV","_jsxDEV","SignUp","_s","username","setUsername","email","setEmail","password","setPassword","usernameError","setUsernameError","apiError","setApiError","navigate","loginWithGoogle","window","open","handleSubmit","event","preventDefault","formData","trim","response","fetch","method","headers","body","JSON","stringify","data","json","success","message","user","ok","setTimeout","Array","isArray","join","error","token","localStorage","getItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","placeholder","required","value","onChange","e","target","autoFocus","style","color","backgroundColor","onClick","src","alt","to","_c","$RefreshReg$"],"sources":["C:/Users/chama/OneDrive/Desktop/plantdiseasedetection1/Frontend/src/Components/SignUp.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { handleSuccess, handleError } from '../utils.js';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport axios from 'axios';\r\nimport './SignUp.css';\r\n\r\nfunction SignUp() {\r\n  const [username, setUsername] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [usernameError, setUsernameError] = useState('');\r\n  const [apiError, setApiError] = useState(''); // State for API error messages\r\n  const navigate = useNavigate();\r\n\r\n  // Google Login function\r\n  const loginWithGoogle = () => {\r\n    window.open(\"http://localhost:8080/auth/google\", \"_self\");\r\n  };\r\n\r\n  // Handle form submit for normal signup\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const formData = { username, email, password };\r\n  \r\n    if (username.trim() === '') {\r\n      setUsernameError('Username is required');\r\n      return;\r\n    } else {\r\n      setUsernameError('');\r\n    }\r\n  \r\n    try {\r\n      const response = await fetch('http://localhost:8080/auth/signup', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(formData),\r\n      });\r\n  \r\n      const data = await response.json();\r\n      const { success, message, user } = data;\r\n  \r\n      if (response.ok && success) {\r\n        handleSuccess(message);\r\n        setTimeout(() => {\r\n          navigate('/login');\r\n        }, 2000);\r\n      } else {\r\n        if (Array.isArray(message)) {\r\n          setApiError(message.join(\", \"));\r\n        } else {\r\n          setApiError(message || 'An error occurred. Please try again later.');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      handleError('An error occurred. Please try again later.');\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    // If the user is already logged in (for example after a Google login), redirect them to the home page.\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      navigate('/'); // Or wherever you want to redirect users when already logged in\r\n    }\r\n  }, [navigate]);\r\n    \r\n  return (\r\n    <div className=\"signup-page\">\r\n      <div className=\"signup-container\">\r\n        <h1 className=\"sign-up-heading\">Get Started</h1>\r\n        <form className=\"form-container\" onSubmit={handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"name\" className=\"signup-label\">Username</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"name\"\r\n              className=\"signup-input\"\r\n              placeholder=\"Enter your username\"\r\n              required\r\n              value={username}\r\n              onChange={(e) => setUsername(e.target.value)}\r\n              autoFocus\r\n            />\r\n            {usernameError && <span className=\"error-text\">{usernameError}</span>}\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"email\" className=\"signup-label\">Email Address</label>\r\n            <input\r\n              type=\"email\"\r\n              id=\"email\"\r\n              className=\"signup-input\"\r\n              placeholder=\"Enter your email\"\r\n              required\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label htmlFor=\"password\" className=\"signup-label\">Password</label>\r\n            <input\r\n              type=\"password\"\r\n              id=\"password\"\r\n              className=\"signup-input\"\r\n              placeholder=\"Enter your password\"\r\n              required\r\n              value={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          {/* Display the API error message if it exists */}\r\n          {apiError && <p className=\"error-text\" style={{ color: 'red' }}>{apiError}</p>}\r\n          \r\n          <button type=\"submit\" className=\"signup-btn\">Sign Up</button>\r\n        </form>\r\n        <ToastContainer />\r\n        <p className=\"or-text\">or</p>\r\n        <div className=\"social-buttons\">\r\n          <button className=\"social-btn\" style={{ backgroundColor: '#f0f0f0' }} onClick={loginWithGoogle}>\r\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS6WwgH7Nl5_AW9nDCnR2Ozb_AU3rkIbSJdAg&s\" alt=\"Google\" className=\"social-icon\" />\r\n              Google\r\n          </button>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <Link to=\"/login\" className=\"link-button\">Have an account? Log in</Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SignUp;\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { handleSuccess, handleError } from '../utils.js';\r\n// import { Link, useNavigate } from 'react-router-dom';\r\n// import { ToastContainer } from 'react-toastify';\r\n// import './SignUp.css';\r\n\r\n// function SignUp() {\r\n//   const [username, setUsername] = useState('');\r\n//   const [email, setEmail] = useState('');\r\n//   const [password, setPassword] = useState('');\r\n//   const [usernameError, setUsernameError] = useState('');\r\n//   const [apiError, setApiError] = useState(''); // State for API error messages\r\n//   const navigate = useNavigate();\r\n\r\n//   // Google Login function\r\n//   const loginWithGoogle = () => {\r\n//     window.open(\"http://localhost:8080/auth/google\", \"_self\");\r\n//   };\r\n\r\n//   // Handle form submit for normal signup\r\n//   const handleSubmit = async (event) => {\r\n//     event.preventDefault();\r\n//     const formData = { username, email, password };\r\n\r\n//     // Simple validation for username\r\n//     if (username.trim() === '') {\r\n//       setUsernameError('Username is required');\r\n//       return;\r\n//     } else {\r\n//       setUsernameError(''); // Clear error if valid\r\n//     }\r\n\r\n//     try {\r\n//       const response = await fetch('http://localhost:8080/auth/signup', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(formData),\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       console.log(data); // Log response for debugging\r\n\r\n//       const { success, message } = data;\r\n\r\n//       if (response.ok && success) {\r\n//         handleSuccess(message);\r\n\r\n//         // Redirect to login page\r\n//         setTimeout(() => {\r\n//           navigate('/login');\r\n//         }, 2000);\r\n//       } else {\r\n//         if (message) {\r\n//           // Set API error message from backend validation errors\r\n//           setApiError(message); // Join array of error messages into one string\r\n//         } else {\r\n//           // Display general error message from backend\r\n//           setApiError(message || 'An error occurred. Please try again later.');\r\n//         }\r\n//       }\r\n//     } catch (message) {\r\n//       //console.error('Error:', message);\r\n//       handleError('An error occurred. Please try again later.');\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // If the user is already logged in (for example after a Google login), redirect them to the home page.\r\n//     const token = localStorage.getItem('token');\r\n//     if (token) {\r\n//       navigate('/'); // Or wherever you want to redirect users when already logged in\r\n//     }\r\n//   }, [navigate]);\r\n\r\n//   return (\r\n//     <div className=\"signup-page\">\r\n//       <div className=\"signup-container\">\r\n//         <h1 className=\"sign-up-heading\">Get Started</h1>\r\n//         <form className=\"form-container\" onSubmit={handleSubmit}>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"name\" className=\"signup-label\">Username</label>\r\n//             <input\r\n//               type=\"text\"\r\n//               id=\"name\"\r\n//               className=\"signup-input\"\r\n//               placeholder=\"Enter your username\"\r\n//               required\r\n//               value={username}\r\n//               onChange={(e) => setUsername(e.target.value)}\r\n//               autoFocus\r\n//             />\r\n//             {usernameError && <span className=\"error-text\">{usernameError}</span>}\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"email\" className=\"signup-label\">Email Address</label>\r\n//             <input\r\n//               type=\"email\"\r\n//               id=\"email\"\r\n//               className=\"signup-input\"\r\n//               placeholder=\"Enter your email\"\r\n//               required\r\n//               value={email}\r\n//               onChange={(e) => setEmail(e.target.value)}\r\n//             />\r\n//           </div>\r\n//           <div className=\"form-group\">\r\n//             <label htmlFor=\"password\" className=\"signup-label\">Password</label>\r\n//             <input\r\n//               type=\"password\"\r\n//               id=\"password\"\r\n//               className=\"signup-input\"\r\n//               placeholder=\"Enter your password\"\r\n//               required\r\n//               value={password}\r\n//               onChange={(e) => setPassword(e.target.value)}\r\n//             />\r\n//           </div>\r\n\r\n//           {/* Display the API error message if it exists */}\r\n//           {apiError && <p className=\"error-text\" style={{ color: 'red' }}>{apiError}</p>}\r\n          \r\n//           <button type=\"submit\" className=\"signup-btn\">Sign Up</button>\r\n//         </form>\r\n//         <ToastContainer />\r\n//         <p className=\"or-text\">or</p>\r\n//         <div className=\"social-buttons\">\r\n//           <button className=\"social-btn\" style={{ backgroundColor: '#f0f0f0' }} onClick={loginWithGoogle}>\r\n//             <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS6WwgH7Nl5_AW9nDCnR2Ozb_AU3rkIbSJdAg&s\" alt=\"Google\" className=\"social-icon\" />\r\n//               Google\r\n//           </button>\r\n//         </div>\r\n//         <div className=\"text-center\">\r\n//           <Link to=\"/login\" className=\"link-button\">Have an account? Log in</Link>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default SignUp;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}