{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chama\\\\OneDrive\\\\Desktop\\\\plantdiseasedetection1\\\\Frontend\\\\src\\\\Flask\\\\Api.jsx\",\n  _s = $RefreshSig$();\n// // import React, { useState } from 'react';\n// // import axios from 'axios';\n// // import './Api.css';\n\n// // function Api() {\n// //   const [file, setFile] = useState(null);\n// //   const [result, setResult] = useState(null);\n// //   const [errorMessage, setErrorMessage] = useState(''); // State for handling errors\n\n// //   const handleFileChange = (e) => {\n// //     setFile(e.target.files[0]);\n// //     setErrorMessage(''); // Clear any existing error messages when file changes\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n\n// //     if (!file) {\n// //       setErrorMessage('Please select an image file before uploading.');\n// //       return;\n// //     }\n\n// //     const formData = new FormData();\n// //     formData.append('image', file);\n\n// //     try {\n// //       const response = await axios.post('http://127.0.0.1:5000/api/predict', formData, {\n// //         headers: {\n// //           'Content-Type': 'multipart/form-data',\n// //         },\n// //       });\n\n// //       // Save the result to the database (only if logged in)\n// //       const predictionData = response.data;\n// //       const token = localStorage.getItem('token'); // Get the token from localStorage\n\n// //       if (token) {\n// //         // Proceed to save the diagnosis history if logged in\n// //         await axios.post(\n// //           'http://localhost:8080/upload-and-diagnose',\n// //           {\n// //             diseaseName: predictionData.title,\n// //             imageUrl: predictionData.image_url,\n// //             token, // Send the token in the request body\n// //           },\n// //           {\n// //             withCredentials: true, // Ensure the session cookie is included (if necessary)\n// //           }\n// //         );\n// //       }\n\n// //       setResult(predictionData);\n// //       setErrorMessage(''); // Clear errors on success\n// //     } catch (error) {\n// //       if (error.response && error.response.data && error.response.data.error) {\n// //         setErrorMessage(error.response.data.error); // Display backend error message\n// //       } else {\n// //         setErrorMessage('An unexpected error occurred. Please try again.');\n// //       }\n// //       setResult(null); // Clear the result if an error occurs\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"main\">\n// //       <h1 className=\"main-heading\">Plant Disease Detector</h1>\n\n// //       <form onSubmit={handleSubmit} className=\"form\">\n// //         <input type=\"file\" className=\"choose\" onChange={handleFileChange} />\n// //         <br />\n// //         <br />\n// //         <button type=\"submit\" className=\"upload\">\n// //           Upload\n// //         </button>\n// //       </form>\n\n// //       {/* Display error message if any */}\n// //       {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n\n// //       {/* Display prediction result if available */}\n// //       {result && (\n// //         <div className=\"container result\">\n// //           <div className=\"row\">\n// //             <h2 className=\"prediction-result col col-12\">Prediction Result</h2>\n\n// //             <div className=\"col-6 div\">\n// //               <p className=\"disease\">Disease:</p>\n// //               <p className=\"disease-des\">{result.title}</p>\n// //             </div>\n// //             <div className=\"col-6 image-div\">\n// //               <img className=\"image\" src={result.image_url} alt=\"Disease\" />\n// //             </div>\n// //             <div className=\"col-12 div\">\n// //               <p className=\"disease\">Description:</p>\n// //               <p className=\"disease-des\">{result.description}</p>\n// //             </div>\n// //             <div className=\"col-12 div\">\n// //               <p className=\"disease\">Prevention:</p>\n// //               <p className=\"disease-des\">{result.prevent}</p>\n// //             </div>\n\n// //             <div className=\"col-12 div\">\n// //               <h3 className=\"supplement disease\">Supplement Information</h3>\n// //               <p className=\"disease-des\">\n// //                 <strong>Supplement:</strong> {result.supplement_name}\n// //               </p>\n// //             </div>\n// //             <div className=\"col-12 div\">\n// //               <img\n// //                 className=\"supplement-image\"\n// //                 src={result.supplement_image_url}\n// //                 alt=\"Supplement\"\n// //               />\n// //               <a href={result.supplement_buy_link} target=\"_blank\" rel=\"noopener noreferrer\">\n// //                 Buy Supplement\n// //               </a>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // export default Api;\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './Api.css';\n\n// function Api() {\n//   const [file, setFile] = useState(null);\n//   const [result, setResult] = useState(null);\n//   const [errorMessage, setErrorMessage] = useState('');\n\n//   const handleFileChange = (e) => {\n//     setFile(e.target.files[0]);\n//     setErrorMessage('');\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!file) {\n//       setErrorMessage('Please select an image file before uploading.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('image', file);\n\n//     try {\n//       // Step 1: Upload image to Cloudinary via Node.js backend\n//       const uploadResponse = await axios.post('http://localhost:8080/upload-to-cloudinary', formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data',\n//         },\n//       });\n\n//       const { imageUrl } = uploadResponse.url; // Extract Cloudinary URL\n\n//       // Step 2: Send Cloudinary URL to Flask API for prediction\n//       const predictionResponse = await axios.post('http://127.0.0.1:5000/api/predict', { image_url: imageUrl });\n//       const predictionData = predictionResponse.data;\n\n//       // Step 3: If logged in, save prediction and Cloudinary URL to the database\n//       const token = localStorage.getItem('token');\n//       if (token) {\n//         await axios.post('http://localhost:8080/upload-and-diagnose',\n//           {\n//             diseaseName: predictionData.title,\n//             imageUrl: imageUrl, // Pass the Cloudinary URL\n//           },\n//           {\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           }\n//         );\n//       }\n\n//       setResult(predictionData); // Display result on success\n//       setErrorMessage('');\n//     } catch (error) {\n//       if (error.response?.data?.error) {\n//         setErrorMessage(error.response.data.error); // Backend error\n//       } else {\n//         setErrorMessage('An unexpected error occurred. Please try again.');\n//       }\n//       setResult(null);\n//     }\n//   };\n\n//   return (\n//     <div className=\"main\">\n//       <h1 className=\"main-heading\">Plant Disease Detector</h1>\n//       <form onSubmit={handleSubmit} className=\"form\">\n//         <input type=\"file\" className=\"choose\" onChange={handleFileChange} />\n//         <br />\n//         <br />\n//         <button type=\"submit\" className=\"upload\">\n//           Upload\n//         </button>\n//       </form>\n//       {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n//       {result && (\n//         <div className=\"container result\">\n//           <div className=\"row\">\n//             <h2 className=\"prediction-result col col-12\">Prediction Result</h2>\n//             <div className=\"col-6 div\">\n//               <p className=\"disease\">Disease:</p>\n//               <p className=\"disease-des\">{result.title}</p>\n//             </div>\n//             <div className=\"col-6 image-div\">\n//               <img className=\"image\" src={result.image_url} alt=\"Disease\" />\n//             </div>\n//             <div className=\"col-12 div\">\n//               <p className=\"disease\">Description:</p>\n//               <p className=\"disease-des\">{result.description}</p>\n//             </div>\n//             <div className=\"col-12 div\">\n//               <p className=\"disease\">Prevention:</p>\n//               <p className=\"disease-des\">{result.prevent}</p>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Api;\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './Api.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Api() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [result, setResult] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const handleFileChange = e => {\n    setFile(e.target.files[0]);\n    setErrorMessage('');\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!file) {\n      setErrorMessage('Please select an image file before uploading.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('image', file);\n    try {\n      // Step 1: Send the file to Flask API for prediction\n      const predictionResponse = await axios.post('http://127.0.0.1:5000/api/predict', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const predictionData = predictionResponse.data;\n\n      // Step 2: Upload the file to Cloudinary\n      const uploadResponse = await axios.post('http://localhost:8080/upload-to-cloudinary', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const {\n        url: imageUrl\n      } = uploadResponse.data;\n\n      // Step 3: Save prediction data and Cloudinary URL in the database only if token exists\n      const token = localStorage.getItem('token');\n      if (token) {\n        await axios.post('http://localhost:8080/upload-and-diagnose', {\n          diseaseName: predictionData.title,\n          imageUrl\n        }, {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      } else {\n        console.log('Token is missing. Diagnosis will not be saved.');\n      }\n\n      // Step 4: Display results\n      setResult({\n        ...predictionData,\n        image_url: imageUrl // Include the Cloudinary URL for display\n      });\n      setErrorMessage('');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      if ((_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.error) {\n        setErrorMessage(error.response.data.error);\n      } else {\n        setErrorMessage('An unexpected error occurred. Please try again.');\n      }\n      setResult(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"main-heading\",\n      children: \"Plant Disease Detector\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"choose\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"upload\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 24\n    }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Prediction Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Disease: \", result.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: result.image_url,\n        alt: \"Uploaded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Description: \", result.description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Prevention: \", result.prevent]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 5\n  }, this);\n}\n_s(Api, \"S4rfPKXPYACRj+wltiiUItKt1sk=\");\n_c = Api;\nexport default Api;\nvar _c;\n$RefreshReg$(_c, \"Api\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Api","_s","file","setFile","result","setResult","errorMessage","setErrorMessage","handleFileChange","e","target","files","handleSubmit","preventDefault","formData","FormData","append","predictionResponse","post","headers","predictionData","data","uploadResponse","url","imageUrl","token","localStorage","getItem","diseaseName","title","Authorization","console","log","image_url","error","_error$response","_error$response$data","response","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","src","alt","description","prevent","_c","$RefreshReg$"],"sources":["C:/Users/chama/OneDrive/Desktop/plantdiseasedetection1/Frontend/src/Flask/Api.jsx"],"sourcesContent":["// // import React, { useState } from 'react';\n// // import axios from 'axios';\n// // import './Api.css';\n\n// // function Api() {\n// //   const [file, setFile] = useState(null);\n// //   const [result, setResult] = useState(null);\n// //   const [errorMessage, setErrorMessage] = useState(''); // State for handling errors\n\n// //   const handleFileChange = (e) => {\n// //     setFile(e.target.files[0]);\n// //     setErrorMessage(''); // Clear any existing error messages when file changes\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n\n// //     if (!file) {\n// //       setErrorMessage('Please select an image file before uploading.');\n// //       return;\n// //     }\n\n// //     const formData = new FormData();\n// //     formData.append('image', file);\n\n// //     try {\n// //       const response = await axios.post('http://127.0.0.1:5000/api/predict', formData, {\n// //         headers: {\n// //           'Content-Type': 'multipart/form-data',\n// //         },\n// //       });\n\n// //       // Save the result to the database (only if logged in)\n// //       const predictionData = response.data;\n// //       const token = localStorage.getItem('token'); // Get the token from localStorage\n\n// //       if (token) {\n// //         // Proceed to save the diagnosis history if logged in\n// //         await axios.post(\n// //           'http://localhost:8080/upload-and-diagnose',\n// //           {\n// //             diseaseName: predictionData.title,\n// //             imageUrl: predictionData.image_url,\n// //             token, // Send the token in the request body\n// //           },\n// //           {\n// //             withCredentials: true, // Ensure the session cookie is included (if necessary)\n// //           }\n// //         );\n// //       }\n\n// //       setResult(predictionData);\n// //       setErrorMessage(''); // Clear errors on success\n// //     } catch (error) {\n// //       if (error.response && error.response.data && error.response.data.error) {\n// //         setErrorMessage(error.response.data.error); // Display backend error message\n// //       } else {\n// //         setErrorMessage('An unexpected error occurred. Please try again.');\n// //       }\n// //       setResult(null); // Clear the result if an error occurs\n// //     }\n// //   };\n\n// //   return (\n// //     <div className=\"main\">\n// //       <h1 className=\"main-heading\">Plant Disease Detector</h1>\n\n// //       <form onSubmit={handleSubmit} className=\"form\">\n// //         <input type=\"file\" className=\"choose\" onChange={handleFileChange} />\n// //         <br />\n// //         <br />\n// //         <button type=\"submit\" className=\"upload\">\n// //           Upload\n// //         </button>\n// //       </form>\n\n// //       {/* Display error message if any */}\n// //       {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n\n// //       {/* Display prediction result if available */}\n// //       {result && (\n// //         <div className=\"container result\">\n// //           <div className=\"row\">\n// //             <h2 className=\"prediction-result col col-12\">Prediction Result</h2>\n\n// //             <div className=\"col-6 div\">\n// //               <p className=\"disease\">Disease:</p>\n// //               <p className=\"disease-des\">{result.title}</p>\n// //             </div>\n// //             <div className=\"col-6 image-div\">\n// //               <img className=\"image\" src={result.image_url} alt=\"Disease\" />\n// //             </div>\n// //             <div className=\"col-12 div\">\n// //               <p className=\"disease\">Description:</p>\n// //               <p className=\"disease-des\">{result.description}</p>\n// //             </div>\n// //             <div className=\"col-12 div\">\n// //               <p className=\"disease\">Prevention:</p>\n// //               <p className=\"disease-des\">{result.prevent}</p>\n// //             </div>\n\n// //             <div className=\"col-12 div\">\n// //               <h3 className=\"supplement disease\">Supplement Information</h3>\n// //               <p className=\"disease-des\">\n// //                 <strong>Supplement:</strong> {result.supplement_name}\n// //               </p>\n// //             </div>\n// //             <div className=\"col-12 div\">\n// //               <img\n// //                 className=\"supplement-image\"\n// //                 src={result.supplement_image_url}\n// //                 alt=\"Supplement\"\n// //               />\n// //               <a href={result.supplement_buy_link} target=\"_blank\" rel=\"noopener noreferrer\">\n// //                 Buy Supplement\n// //               </a>\n// //             </div>\n// //           </div>\n// //         </div>\n// //       )}\n// //     </div>\n// //   );\n// // }\n\n// // export default Api;\n\n\n// import React, { useState } from 'react';\n// import axios from 'axios';\n// import './Api.css';\n\n// function Api() {\n//   const [file, setFile] = useState(null);\n//   const [result, setResult] = useState(null);\n//   const [errorMessage, setErrorMessage] = useState('');\n\n//   const handleFileChange = (e) => {\n//     setFile(e.target.files[0]);\n//     setErrorMessage('');\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!file) {\n//       setErrorMessage('Please select an image file before uploading.');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('image', file);\n\n//     try {\n//       // Step 1: Upload image to Cloudinary via Node.js backend\n//       const uploadResponse = await axios.post('http://localhost:8080/upload-to-cloudinary', formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data',\n//         },\n//       });\n\n//       const { imageUrl } = uploadResponse.url; // Extract Cloudinary URL\n\n//       // Step 2: Send Cloudinary URL to Flask API for prediction\n//       const predictionResponse = await axios.post('http://127.0.0.1:5000/api/predict', { image_url: imageUrl });\n//       const predictionData = predictionResponse.data;\n\n//       // Step 3: If logged in, save prediction and Cloudinary URL to the database\n//       const token = localStorage.getItem('token');\n//       if (token) {\n//         await axios.post('http://localhost:8080/upload-and-diagnose',\n//           {\n//             diseaseName: predictionData.title,\n//             imageUrl: imageUrl, // Pass the Cloudinary URL\n//           },\n//           {\n//             headers: {\n//               Authorization: `Bearer ${token}`,\n//             },\n//           }\n//         );\n//       }\n\n//       setResult(predictionData); // Display result on success\n//       setErrorMessage('');\n//     } catch (error) {\n//       if (error.response?.data?.error) {\n//         setErrorMessage(error.response.data.error); // Backend error\n//       } else {\n//         setErrorMessage('An unexpected error occurred. Please try again.');\n//       }\n//       setResult(null);\n//     }\n//   };\n\n//   return (\n//     <div className=\"main\">\n//       <h1 className=\"main-heading\">Plant Disease Detector</h1>\n//       <form onSubmit={handleSubmit} className=\"form\">\n//         <input type=\"file\" className=\"choose\" onChange={handleFileChange} />\n//         <br />\n//         <br />\n//         <button type=\"submit\" className=\"upload\">\n//           Upload\n//         </button>\n//       </form>\n//       {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n//       {result && (\n//         <div className=\"container result\">\n//           <div className=\"row\">\n//             <h2 className=\"prediction-result col col-12\">Prediction Result</h2>\n//             <div className=\"col-6 div\">\n//               <p className=\"disease\">Disease:</p>\n//               <p className=\"disease-des\">{result.title}</p>\n//             </div>\n//             <div className=\"col-6 image-div\">\n//               <img className=\"image\" src={result.image_url} alt=\"Disease\" />\n//             </div>\n//             <div className=\"col-12 div\">\n//               <p className=\"disease\">Description:</p>\n//               <p className=\"disease-des\">{result.description}</p>\n//             </div>\n//             <div className=\"col-12 div\">\n//               <p className=\"disease\">Prevention:</p>\n//               <p className=\"disease-des\">{result.prevent}</p>\n//             </div>\n//           </div>\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Api;\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './Api.css';\n\nfunction Api() {\n  const [file, setFile] = useState(null);\n  const [result, setResult] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleFileChange = (e) => {\n    setFile(e.target.files[0]);\n    setErrorMessage('');\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n  \n    if (!file) {\n      setErrorMessage('Please select an image file before uploading.');\n      return;\n    }\n  \n    const formData = new FormData();\n    formData.append('image', file);\n  \n    try {\n      // Step 1: Send the file to Flask API for prediction\n      const predictionResponse = await axios.post(\n        'http://127.0.0.1:5000/api/predict',\n        formData,\n        { headers: { 'Content-Type': 'multipart/form-data' } }\n      );\n      const predictionData = predictionResponse.data;\n  \n      // Step 2: Upload the file to Cloudinary\n      const uploadResponse = await axios.post(\n        'http://localhost:8080/upload-to-cloudinary',\n        formData,\n        { headers: { 'Content-Type': 'multipart/form-data' } }\n      );\n      const { url: imageUrl } = uploadResponse.data;\n  \n      // Step 3: Save prediction data and Cloudinary URL in the database only if token exists\n      const token = localStorage.getItem('token');\n      if (token) {\n        await axios.post(\n          'http://localhost:8080/upload-and-diagnose',\n          { diseaseName: predictionData.title, imageUrl },\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n      } else {\n        console.log('Token is missing. Diagnosis will not be saved.');\n      }\n  \n      // Step 4: Display results\n      setResult({\n        ...predictionData,\n        image_url: imageUrl, // Include the Cloudinary URL for display\n      });\n      setErrorMessage('');\n    } catch (error) {\n      if (error.response?.data?.error) {\n        setErrorMessage(error.response.data.error);\n      } else {\n        setErrorMessage('An unexpected error occurred. Please try again.');\n      }\n      setResult(null);\n    }\n  };\n  \n\n  return (\n    <div className=\"main\">\n      <h1 className=\"main-heading\">Plant Disease Detector</h1>\n      <form onSubmit={handleSubmit} className=\"form\">\n        <input type=\"file\" className=\"choose\" onChange={handleFileChange} />\n        <br />\n        <br />\n        <button type=\"submit\" className=\"upload\">\n          Upload\n        </button>\n      </form>\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n      {result && (\n        <div className=\"container result\">\n          <h2>Prediction Result</h2>\n          <p>Disease: {result.title}</p>\n          <img src={result.image_url} alt=\"Uploaded\" />\n          <p>Description: {result.description}</p>\n          <p>Prevention: {result.prevent}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Api;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}