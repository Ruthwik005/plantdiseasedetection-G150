{"ast":null,"code":"// // src/utils/authUtils.js\n\n// // Check if the JWT token is expired\n// export const isTokenExpired = (token) => {\n//     if (!token) return true;\n\n//     try {\n//       const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decode JWT payload\n//       const currentTime = Date.now() / 1000; // Current time in seconds\n//       return decodedToken.exp < currentTime; // Return if the token is expired\n//     } catch (error) {\n//       console.error('Invalid token:', error);\n//       return true;\n//     }\n//   };\n\n//   // Log out the user by clearing localStorage and redirecting to login\n//   export const logoutUser = (navigate) => {\n//     localStorage.removeItem('loggedInUser');\n//     localStorage.removeItem('token');\n//     localStorage.clear();\n//     navigate('/'); // Redirect to the login page\n//   };","map":{"version":3,"names":[],"sources":["C:/Users/chama/OneDrive/Desktop/plantdiseasedetection1/Frontend/src/Components/authUtils.js"],"sourcesContent":["// // src/utils/authUtils.js\r\n\r\n// // Check if the JWT token is expired\r\n// export const isTokenExpired = (token) => {\r\n//     if (!token) return true;\r\n  \r\n//     try {\r\n//       const decodedToken = JSON.parse(atob(token.split('.')[1])); // Decode JWT payload\r\n//       const currentTime = Date.now() / 1000; // Current time in seconds\r\n//       return decodedToken.exp < currentTime; // Return if the token is expired\r\n//     } catch (error) {\r\n//       console.error('Invalid token:', error);\r\n//       return true;\r\n//     }\r\n//   };\r\n  \r\n//   // Log out the user by clearing localStorage and redirecting to login\r\n//   export const logoutUser = (navigate) => {\r\n//     localStorage.removeItem('loggedInUser');\r\n//     localStorage.removeItem('token');\r\n//     localStorage.clear();\r\n//     navigate('/'); // Redirect to the login page\r\n//   };\r\n  "],"mappings":"AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}