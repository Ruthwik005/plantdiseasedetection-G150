{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chama\\\\OneDrive\\\\Desktop\\\\plantdiseasedetection1\\\\Frontend\\\\src\\\\Components\\\\TokenCheck.jsx\",\n  _s = $RefreshSig$();\n// src/components/TokenCheck.js\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { isTokenExpired, logoutUser } from './authUtils.js'; // Import utility functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TokenCheck = () => {\n  _s();\n  const navigate = useNavigate();\n  const [isCheckingToken, setIsCheckingToken] = useState(true);\n  useEffect(() => {\n    const token = localStorage.getItem('token'); // Get the token from localStorage\n\n    if (token && isTokenExpired(token)) {\n      // If the token is expired, log the user out and navigate to login\n      logoutUser(navigate);\n    } else {\n      setIsCheckingToken(false); // If token is valid or doesn't exist, stop checking\n    }\n  }, [navigate]); // Only runs once when the component is mounted\n\n  if (isCheckingToken) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this); // Optionally, you can show a loading spinner or any other placeholder\n  }\n  return null; // If token is valid, return nothing (you don't need to render anything)\n};\n_s(TokenCheck, \"+Zx9ofOkCa7AOWVcOKz7pZWpNY8=\", false, function () {\n  return [useNavigate];\n});\n_c = TokenCheck;\nexport default TokenCheck;\nvar _c;\n$RefreshReg$(_c, \"TokenCheck\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","isTokenExpired","logoutUser","jsxDEV","_jsxDEV","TokenCheck","_s","navigate","isCheckingToken","setIsCheckingToken","token","localStorage","getItem","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/chama/OneDrive/Desktop/plantdiseasedetection1/Frontend/src/Components/TokenCheck.jsx"],"sourcesContent":["// src/components/TokenCheck.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { isTokenExpired, logoutUser } from './authUtils.js';  // Import utility functions\r\n\r\nconst TokenCheck = () => {\r\n  const navigate = useNavigate();\r\n  const [isCheckingToken, setIsCheckingToken] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token'); // Get the token from localStorage\r\n\r\n    if (token && isTokenExpired(token)) {\r\n      // If the token is expired, log the user out and navigate to login\r\n      logoutUser(navigate);\r\n    } else {\r\n      setIsCheckingToken(false); // If token is valid or doesn't exist, stop checking\r\n    }\r\n  }, [navigate]); // Only runs once when the component is mounted\r\n\r\n  if (isCheckingToken) {\r\n    return <div>Loading...</div>;  // Optionally, you can show a loading spinner or any other placeholder\r\n  }\r\n\r\n  return null;  // If token is valid, return nothing (you don't need to render anything)\r\n};\r\n\r\nexport default TokenCheck;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,cAAc,EAAEC,UAAU,QAAQ,gBAAgB,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACQ,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5DD,SAAS,CAAC,MAAM;IACd,MAAMY,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;IAE7C,IAAIF,KAAK,IAAIT,cAAc,CAACS,KAAK,CAAC,EAAE;MAClC;MACAR,UAAU,CAACK,QAAQ,CAAC;IACtB,CAAC,MAAM;MACLE,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7B;EACF,CAAC,EAAE,CAACF,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,IAAIC,eAAe,EAAE;IACnB,oBAAOJ,OAAA;MAAAS,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAE;EACjC;EAEA,OAAO,IAAI,CAAC,CAAE;AAChB,CAAC;AAACX,EAAA,CApBID,UAAU;EAAA,QACGL,WAAW;AAAA;AAAAkB,EAAA,GADxBb,UAAU;AAsBhB,eAAeA,UAAU;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}