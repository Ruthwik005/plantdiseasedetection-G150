{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chama\\\\OneDrive\\\\Desktop\\\\plantdiseasedetection1\\\\Frontend\\\\src\\\\App.js\";\nimport React from \"react\";\n// import Api from \"./Flask/Api.jsx\"\n// import { useState, useEffect, createContext } from 'react';\n// import { Routes, Route, Navigate } from 'react-router-dom';\n// import axios from 'axios';\n// import SignUp from './Components/SignUp.jsx';\n// import LogIn from './Components/LogIn.jsx';\n// import Home from './Components/Home.jsx';\n// import Profile from './Components/Profile.jsx';\n// import Error from './Components/Error.jsx';\n// import UploadAndDiagnosis from './Components/UploadAndDiagnosis.jsx';\n// import ForgotPassword from './Components/ForgotPassword.jsx';\n// import ResetPassword from './Components/ResetPassword.jsx';\n// import OTPVerification from './Components/OTPVerification.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const IsLoggedInContext = createContext();\nexport const SetIsLoggedInContext = createContext();\nfunction App() {\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // const [loading, setLoading] = useState(true);\n\n  // // This function is passed to LogIn component to update the login state after a successful login\n  // const handleLoginSuccess = () => {\n  //   setIsLoggedIn(true);\n  //   localStorage.setItem('isLoggedIn', 'true');\n  // };\n\n  // useEffect(() => {\n  //   // Initialize the login state from localStorage when the app first loads\n  //   const storedLoginStatus = localStorage.getItem('isLoggedIn');\n  //   if (storedLoginStatus === 'true') {\n  //     setIsLoggedIn(true);\n  //     setLoading(false);\n  //   } else {\n  //     axios.get('http://localhost:8080/user', { withCredentials: true })\n  //       .then((res) => {\n  //         if (res.data.user) {\n  //           setIsLoggedIn(true);\n  //           localStorage.setItem('isLoggedIn', 'true');\n  //         } else {\n  //           setIsLoggedIn(false);\n  //           localStorage.removeItem('isLoggedIn');\n  //         }\n  //       })\n  //       .catch((err) => {\n  //         setIsLoggedIn(false);\n  //         localStorage.removeItem('isLoggedIn');\n  //         console.log(err);\n  //       })\n  //       .finally(() => setLoading(false));\n  //   }\n  // }, []);\n\n  // // This function handles logging out the user\n  // const handleLogout = async () => {\n  //   try {\n  //     await axios.get('http://localhost:8080/logout', { withCredentials: true });\n  //     setIsLoggedIn(false);\n  //     localStorage.removeItem('isLoggedIn');\n  //   } catch (err) {\n  //     console.log('Error logging out:', err);\n  //   }\n  // };\n\n  // if (loading) return null; // You could also return a loading spinner here\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Api, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","IsLoggedInContext","createContext","SetIsLoggedInContext","App","children","Api","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/chama/OneDrive/Desktop/plantdiseasedetection1/Frontend/src/App.js"],"sourcesContent":["import React from \"react\";\n// import Api from \"./Flask/Api.jsx\"\n// import { useState, useEffect, createContext } from 'react';\n// import { Routes, Route, Navigate } from 'react-router-dom';\n// import axios from 'axios';\n// import SignUp from './Components/SignUp.jsx';\n// import LogIn from './Components/LogIn.jsx';\n// import Home from './Components/Home.jsx';\n// import Profile from './Components/Profile.jsx';\n// import Error from './Components/Error.jsx';\n// import UploadAndDiagnosis from './Components/UploadAndDiagnosis.jsx';\n// import ForgotPassword from './Components/ForgotPassword.jsx';\n// import ResetPassword from './Components/ResetPassword.jsx';\n// import OTPVerification from './Components/OTPVerification.jsx';\n\nexport const IsLoggedInContext = createContext();\nexport const SetIsLoggedInContext = createContext();\n\nfunction App() {\n  // const [isLoggedIn, setIsLoggedIn] = useState(false);\n  // const [loading, setLoading] = useState(true);\n\n  // // This function is passed to LogIn component to update the login state after a successful login\n  // const handleLoginSuccess = () => {\n  //   setIsLoggedIn(true);\n  //   localStorage.setItem('isLoggedIn', 'true');\n  // };\n\n  // useEffect(() => {\n  //   // Initialize the login state from localStorage when the app first loads\n  //   const storedLoginStatus = localStorage.getItem('isLoggedIn');\n  //   if (storedLoginStatus === 'true') {\n  //     setIsLoggedIn(true);\n  //     setLoading(false);\n  //   } else {\n  //     axios.get('http://localhost:8080/user', { withCredentials: true })\n  //       .then((res) => {\n  //         if (res.data.user) {\n  //           setIsLoggedIn(true);\n  //           localStorage.setItem('isLoggedIn', 'true');\n  //         } else {\n  //           setIsLoggedIn(false);\n  //           localStorage.removeItem('isLoggedIn');\n  //         }\n  //       })\n  //       .catch((err) => {\n  //         setIsLoggedIn(false);\n  //         localStorage.removeItem('isLoggedIn');\n  //         console.log(err);\n  //       })\n  //       .finally(() => setLoading(false));\n  //   }\n  // }, []);\n\n  // // This function handles logging out the user\n  // const handleLogout = async () => {\n  //   try {\n  //     await axios.get('http://localhost:8080/logout', { withCredentials: true });\n  //     setIsLoggedIn(false);\n  //     localStorage.removeItem('isLoggedIn');\n  //   } catch (err) {\n  //     console.log('Error logging out:', err);\n  //   }\n  // };\n\n  // if (loading) return null; // You could also return a loading spinner here\n\n  return (\n    <div>\n       {/* <IsLoggedInContext.Provider value={isLoggedIn}>\n        <SetIsLoggedInContext.Provider value={setIsLoggedIn}>\n          <Routes>\n            <Route path=\"/\" element={<Navigate to=\"/home\" />} />\n            <Route path=\"/home\" element={<Home />} />\n            <Route path=\"/login\" element={isLoggedIn ? <Navigate to=\"/\" /> : <LogIn onLoginSuccess={handleLoginSuccess} />} />\n            <Route path=\"/UploadAndDiagnosis\" element={<UploadAndDiagnosis />} />\n            <Route path=\"/signup\" element={isLoggedIn ? <Navigate to=\"/\" /> : <SignUp />} />\n            <Route path=\"/forgot-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ForgotPassword />} />\n            <Route path=\"/verify-otp\" element={isLoggedIn ? <Navigate to=\"/\" /> : <OTPVerification />} />\n            <Route path=\"/reset-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ResetPassword />} />\n            <Route path=\"/profile\" element={isLoggedIn ? <Profile /> : <Navigate to=\"/login\" />} />\n            <Route path=\"*\" element={<Error />} />\n          </Routes>\n        </SetIsLoggedInContext.Provider>\n      </IsLoggedInContext.Provider>  */}\n      <Api/>\n    </div>\n  );\n}\n\nexport default App;\n\n\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,OAAO,MAAMC,iBAAiB,GAAGC,aAAa,CAAC,CAAC;AAChD,OAAO,MAAMC,oBAAoB,GAAGD,aAAa,CAAC,CAAC;AAEnD,SAASE,GAAGA,CAAA,EAAG;EACb;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA,oBACEJ,OAAA;IAAAK,QAAA,eAiBEL,OAAA,CAACM,GAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACC,EAAA,GAtEQP,GAAG;AAwEZ,eAAeA,GAAG;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}