{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chama\\\\OneDrive\\\\Desktop\\\\plantdiseasedetection1\\\\Frontend\\\\src\\\\Components\\\\ResetPassword.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom'; // To get token from URL and navigate\n// import './ResetPassword.css';\n\n// const ResetPassword = () => {\n//     const [newPassword, setNewPassword] = useState('');\n//     const [confirmPassword, setConfirmPassword] = useState('');\n//     const [message, setMessage] = useState('');\n//     const [submitted, setSubmitted] = useState(false);\n\n//     const { token } = useParams(); // Retrieve token from URL\n//     const navigate = useNavigate(); // To redirect after successful reset\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n\n//         // Validate that passwords match\n//         if (newPassword !== confirmPassword) {\n//             setMessage(\"Passwords do not match.\");\n//             return;\n//         }\n\n//         setSubmitted(true);\n\n//         try {\n//             // Send request to reset password with token and new password\n//             const res = await fetch(`http://localhost:3000/auth/reset-password/:${token}`, {\n//                 method: 'POST',\n//                 headers: { 'Content-Type': 'application/json' },\n//                 body: JSON.stringify({ newPassword })\n//             });\n//             const data = await res.json();\n\n//             if (res.ok) {\n//                 setMessage(\"Password has been reset successfully! Redirecting to login...\");\n//                 setTimeout(() => navigate('/login'), 3000); // Redirect after 3 seconds\n//             } else {\n//                 setMessage(data.error || 'Failed to reset password.');\n//                 setSubmitted(false);\n//             }\n//         } catch (error) {\n//             setMessage('Failed to reset password.');\n//             setSubmitted(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"reset-password-container\">\n//             <form onSubmit={handleSubmit} className=\"reset-password-form\">\n//                 <h2>Reset Password</h2>\n//                 <p>Enter a new password for your account.</p>\n\n//                 {/* Show success or error message */}\n//                 {message && <p className=\"message\">{message}</p>}\n\n//                 <input\n//                     type=\"password\"\n//                     placeholder=\"New Password\"\n//                     value={newPassword}\n//                     onChange={(e) => setNewPassword(e.target.value)}\n//                     required\n//                 />\n//                 <input\n//                     type=\"password\"\n//                     placeholder=\"Confirm New Password\"\n//                     value={confirmPassword}\n//                     onChange={(e) => setConfirmPassword(e.target.value)}\n//                     required\n//                 />\n\n//                 <button type=\"submit\" disabled={submitted}>\n//                     {submitted ? 'Resetting...' : 'Reset Password'}\n//                 </button>\n//             </form>\n//         </div>\n//     );\n// };\n\n// export default ResetPassword;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport './OtpVerification.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction OTPVerification() {\n  _s();\n  const location = useLocation();\n  const [otp, setOtp] = useState('');\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n  const {\n    email\n  } = location.state; // Ensure this comes from the previous page\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post('http://localhost:8080/verify-otp', {\n        email,\n        otp\n      });\n\n      // Log the response to verify it's correct\n      console.log(response.data);\n      setMessage(response.data.message); // Display the message returned from the backend\n\n      // Check if the response contains a success flag\n      if (response.data.success) {\n        // Redirect to reset password page if OTP is verified successfully\n        setTimeout(() => {\n          navigate('/reset-password', {\n            state: {\n              email\n            }\n          });\n        }, 1000); // 1-second delay to show message before redirect\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      // Handle error messages\n      console.error(error);\n      setMessage(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'An error occurred');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"OTP Verification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: otp,\n        onChange: e => setOtp(e.target.value),\n        placeholder: \"Enter OTP\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Verify OTP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_s(OTPVerification, \"b2dmm7n+1pNLk1uQqOTxDA1ny/k=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = OTPVerification;\nexport default OTPVerification;\nvar _c;\n$RefreshReg$(_c, \"OTPVerification\");","map":{"version":3,"names":["React","useState","axios","useLocation","useNavigate","jsxDEV","_jsxDEV","OTPVerification","_s","location","otp","setOtp","message","setMessage","navigate","email","state","handleSubmit","e","preventDefault","response","post","console","log","data","success","setTimeout","error","_error$response","_error$response$data","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/chama/OneDrive/Desktop/plantdiseasedetection1/Frontend/src/Components/ResetPassword.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useParams, useNavigate } from 'react-router-dom'; // To get token from URL and navigate\r\n// import './ResetPassword.css';\r\n\r\n// const ResetPassword = () => {\r\n//     const [newPassword, setNewPassword] = useState('');\r\n//     const [confirmPassword, setConfirmPassword] = useState('');\r\n//     const [message, setMessage] = useState('');\r\n//     const [submitted, setSubmitted] = useState(false);\r\n\r\n//     const { token } = useParams(); // Retrieve token from URL\r\n//     const navigate = useNavigate(); // To redirect after successful reset\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n        \r\n//         // Validate that passwords match\r\n//         if (newPassword !== confirmPassword) {\r\n//             setMessage(\"Passwords do not match.\");\r\n//             return;\r\n//         }\r\n\r\n//         setSubmitted(true);\r\n\r\n//         try {\r\n//             // Send request to reset password with token and new password\r\n//             const res = await fetch(`http://localhost:3000/auth/reset-password/:${token}`, {\r\n//                 method: 'POST',\r\n//                 headers: { 'Content-Type': 'application/json' },\r\n//                 body: JSON.stringify({ newPassword })\r\n//             });\r\n//             const data = await res.json();\r\n\r\n//             if (res.ok) {\r\n//                 setMessage(\"Password has been reset successfully! Redirecting to login...\");\r\n//                 setTimeout(() => navigate('/login'), 3000); // Redirect after 3 seconds\r\n//             } else {\r\n//                 setMessage(data.error || 'Failed to reset password.');\r\n//                 setSubmitted(false);\r\n//             }\r\n//         } catch (error) {\r\n//             setMessage('Failed to reset password.');\r\n//             setSubmitted(false);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"reset-password-container\">\r\n//             <form onSubmit={handleSubmit} className=\"reset-password-form\">\r\n//                 <h2>Reset Password</h2>\r\n//                 <p>Enter a new password for your account.</p>\r\n                \r\n//                 {/* Show success or error message */}\r\n//                 {message && <p className=\"message\">{message}</p>}\r\n                \r\n//                 <input\r\n//                     type=\"password\"\r\n//                     placeholder=\"New Password\"\r\n//                     value={newPassword}\r\n//                     onChange={(e) => setNewPassword(e.target.value)}\r\n//                     required\r\n//                 />\r\n//                 <input\r\n//                     type=\"password\"\r\n//                     placeholder=\"Confirm New Password\"\r\n//                     value={confirmPassword}\r\n//                     onChange={(e) => setConfirmPassword(e.target.value)}\r\n//                     required\r\n//                 />\r\n                \r\n//                 <button type=\"submit\" disabled={submitted}>\r\n//                     {submitted ? 'Resetting...' : 'Reset Password'}\r\n//                 </button>\r\n//             </form>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ResetPassword;\r\n\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport './OtpVerification.css';\r\n\r\nfunction OTPVerification() {\r\n  const location = useLocation();\r\n  const [otp, setOtp] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const navigate = useNavigate();\r\n  const { email } = location.state; // Ensure this comes from the previous page\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/verify-otp', { email, otp });\r\n\r\n      // Log the response to verify it's correct\r\n      console.log(response.data);\r\n\r\n      setMessage(response.data.message); // Display the message returned from the backend\r\n\r\n      // Check if the response contains a success flag\r\n      if (response.data.success) {\r\n        // Redirect to reset password page if OTP is verified successfully\r\n        setTimeout(() => {\r\n          navigate('/reset-password', { state: { email } });\r\n        }, 1000); // 1-second delay to show message before redirect\r\n      }\r\n    } catch (error) {\r\n      // Handle error messages\r\n      console.error(error);\r\n      setMessage(error.response?.data?.message || 'An error occurred');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>OTP Verification</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          value={otp}\r\n          onChange={(e) => setOtp(e.target.value)}\r\n          placeholder=\"Enter OTP\"\r\n          required\r\n        />\r\n        <button type=\"submit\">Verify OTP</button>\r\n      </form>\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OTPVerification;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}