{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chama\\\\OneDrive\\\\Desktop\\\\plantdiseasedetection1\\\\Frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import { useState, useEffect, createContext } from 'react';\n// import SignUp from './Components/SignUp.jsx';\n// import LogIn from './Components/LogIn.jsx';\n// import Error from './Components/Error.jsx';\n// import Home from './Components/Home.jsx';\n// import Profile from './Components/Profile.jsx';\n// import OTPVerification from './Components/OTPVerification.jsx';\n// import UploadAndDiagnosis from './Components/UploadAndDiagnosis.jsx';\n// import ForgotPassword from './Components/ForgotPassword.jsx';\n// import ResetPassword from './Components/ResetPassword.jsx';\n// import useAuth from './hooks/useAuth.js';\n// import { Navigate, Routes, Route } from 'react-router-dom';\n// import axios from 'axios';\n\n// export const IsLoggedInContext = createContext();\n// export const SetIsLoggedInContext = createContext();\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const storedLoginStatus = localStorage.getItem('isLoggedIn');\n\n//     if (storedLoginStatus === 'true') {\n//       setIsLoggedIn(true);\n//       setLoading(false);  // Set loading to false immediately if logged in\n//     } else {\n//       axios.get('http://localhost:8080/user', { withCredentials: true })\n//         .then((res) => {\n//           console.log(res.data); // Log response to check the user data\n//           if (res.data.user) {\n//             setIsLoggedIn(true);\n//             localStorage.setItem('isLoggedIn', 'true'); // Store login status after successful response\n//           } else {\n//             setIsLoggedIn(false);\n//             localStorage.removeItem('isLoggedIn');\n//           }\n//         })\n//         .catch((err) => {\n//           setIsLoggedIn(false);\n//           localStorage.removeItem('isLoggedIn');\n//           console.log(err);\n//         })\n//         .finally(() => setLoading(false));  // Set loading to false after API call\n//     }\n//   }, []);\n\n//   const handleLogout = async () => {\n//     try {\n//       await axios.get('http://localhost:8080/logout', { withCredentials: true });\n//       setIsLoggedIn(false);\n//       localStorage.removeItem('isLoggedIn');\n//     } catch (err) {\n//       console.log('Error logging out:', err);\n//     } finally {\n//       setLoading(false);  // Set loading to false after logout\n//     }\n//   };\n\n//   if (loading) return null; // You could also return a loading spinner here\n\n//   return (\n//     <div>\n//       <IsLoggedInContext.Provider value={isLoggedIn}>\n//         <SetIsLoggedInContext.Provider value={setIsLoggedIn}>\n//           <Routes>\n//             <Route path=\"/\" element={<Navigate to=\"/home\" />} />\n//             <Route path=\"/home\" element={<Home />} />\n//             <Route path=\"/login\" element={isLoggedIn ? <Navigate to=\"/\" /> : <LogIn />} />\n//             <Route path=\"/UploadAndDiagnosis\" element={<UploadAndDiagnosis />} />\n//             <Route path=\"/signup\" element={isLoggedIn ? <Navigate to=\"/\" /> : <SignUp />} />\n//             <Route path=\"/forgot-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ForgotPassword />} />\n//             <Route path=\"/verify-otp\" element={isLoggedIn ? <Navigate to=\"/\" /> : <OTPVerification />} />\n//             <Route path=\"/reset-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ResetPassword />} />\n//             <Route path=\"/profile\" element={isLoggedIn ? <Profile /> : <Navigate to=\"/login\" />} />\n//             <Route path=\"*\" element={<Error />} />\n//           </Routes>\n//         </SetIsLoggedInContext.Provider>\n//       </IsLoggedInContext.Provider>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import { useState, useEffect, createContext } from 'react';\n// import { Routes, Route, Navigate } from 'react-router-dom';\n// import axios from 'axios';\n// import SignUp from './Components/SignUp.jsx';\n// import LogIn from './Components/LogIn.jsx';\n// import Home from './Components/Home.jsx';\n// import Profile from './Components/Profile.jsx';\n// import Error from './Components/Error.jsx';\n// import UploadAndDiagnosis from './Components/UploadAndDiagnosis.jsx';\n// import ForgotPassword from './Components/ForgotPassword.jsx';\n// import ResetPassword from './Components/ResetPassword.jsx';\n// import OTPVerification from './Components/OTPVerification.jsx';\n\n// export const IsLoggedInContext = createContext();\n// export const SetIsLoggedInContext = createContext();\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [loading, setLoading] = useState(true);\n\n//   // This function is passed to LogIn component to update the login state after a successful login\n//   const handleLoginSuccess = () => {\n//     setIsLoggedIn(true);\n//     localStorage.setItem('isLoggedIn', 'true');\n//   };\n\n//   useEffect(() => {\n//     // Initialize the login state from localStorage when the app first loads\n//     const storedLoginStatus = localStorage.getItem('isLoggedIn');\n//     if (storedLoginStatus === 'true') {\n//       setIsLoggedIn(true);\n//       setLoading(false);\n//     } else {\n//       axios.get('http://localhost:8080/user', { withCredentials: true })\n//         .then((res) => {\n//           if (res.data.user) {\n//             setIsLoggedIn(true);\n//             localStorage.setItem('isLoggedIn', 'true');\n//           } else {\n//             setIsLoggedIn(false);\n//             localStorage.removeItem('isLoggedIn');\n//           }\n//         })\n//         .catch((err) => {\n//           setIsLoggedIn(false);\n//           localStorage.removeItem('isLoggedIn');\n//           console.log(err);\n//         })\n//         .finally(() => setLoading(false));\n//     }\n//   }, []);\n\n//   // This function handles logging out the user\n//   const handleLogout = async () => {\n//     try {\n//       await axios.get('http://localhost:8080/logout', { withCredentials: true });\n//       setIsLoggedIn(false);\n//       localStorage.removeItem('isLoggedIn');\n//     } catch (err) {\n//       console.log('Error logging out:', err);\n//     }\n//   };\n\n//   if (loading) return null; // You could also return a loading spinner here\n\n//   return (\n//     <div>\n//       <IsLoggedInContext.Provider value={isLoggedIn}>\n//         <SetIsLoggedInContext.Provider value={setIsLoggedIn}>\n//           <Routes>\n//             <Route path=\"/\" element={<Navigate to=\"/home\" />} />\n//             <Route path=\"/home\" element={<Home />} />\n//             <Route path=\"/login\" element={isLoggedIn ? <Navigate to=\"/\" /> : <LogIn onLoginSuccess={handleLoginSuccess} />} />\n//             <Route path=\"/UploadAndDiagnosis\" element={<UploadAndDiagnosis />} />\n//             <Route path=\"/signup\" element={isLoggedIn ? <Navigate to=\"/\" /> : <SignUp />} />\n//             <Route path=\"/forgot-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ForgotPassword />} />\n//             <Route path=\"/verify-otp\" element={isLoggedIn ? <Navigate to=\"/\" /> : <OTPVerification />} />\n//             <Route path=\"/reset-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ResetPassword />} />\n//             <Route path=\"/profile\" element={isLoggedIn ? <Profile /> : <Navigate to=\"/login\" />} />\n//             <Route path=\"*\" element={<Error />} />\n//           </Routes>\n//         </SetIsLoggedInContext.Provider>\n//       </IsLoggedInContext.Provider>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport { useState, useEffect, createContext } from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport axios from 'axios';\nimport SignUp from './Components/SignUp.jsx';\nimport LogIn from './Components/LogIn.jsx';\nimport Home from './Components/Home.jsx';\nimport Profile from './Components/Profile.jsx';\nimport Error from './Components/Error.jsx';\nimport UploadAndDiagnosis from './Components/UploadAndDiagnosis.jsx';\nimport ForgotPassword from './Components/ForgotPassword.jsx';\nimport ResetPassword from './Components/ResetPassword.jsx';\nimport OTPVerification from './Components/OTPVerification.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const IsLoggedInContext = /*#__PURE__*/createContext();\nexport const SetIsLoggedInContext = /*#__PURE__*/createContext();\nfunction App() {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Update login state and store token after a successful login\n  const handleLoginSuccess = token => {\n    localStorage.setItem('token', token); // Store the token\n    setIsLoggedIn(true);\n  };\n  useEffect(() => {\n    // Check if a token exists in localStorage to set login state\n    const token = localStorage.getItem('token');\n    if (token) {\n      axios.get('http://localhost:8080/user', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        } // Include token in headers\n      }).then(res => {\n        if (res.data.user) {\n          setIsLoggedIn(true);\n        } else {\n          setIsLoggedIn(false);\n          localStorage.removeItem('token');\n        }\n      }).catch(err => {\n        setIsLoggedIn(false);\n        localStorage.removeItem('token');\n        console.log('User verification failed:', err);\n      }).finally(() => setLoading(false));\n    } else {\n      setLoading(false); // No token means user is logged out\n    }\n  }, []);\n\n  // Function to log out the user and clear token\n  const handleLogout = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.get('http://localhost:8080/logout', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setIsLoggedIn(false);\n      localStorage.removeItem('token'); // Clear token on logout\n    } catch (err) {\n      console.log('Error logging out:', err);\n    }\n  };\n  if (loading) return null; // Optionally, render a loading spinner here\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(IsLoggedInContext.Provider, {\n      value: isLoggedIn,\n      children: /*#__PURE__*/_jsxDEV(SetIsLoggedInContext.Provider, {\n        value: setIsLoggedIn,\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Navigate, {\n              to: \"/home\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 38\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/home\",\n            element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 42\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/login\",\n            element: isLoggedIn ? /*#__PURE__*/_jsxDEV(Navigate, {\n              to: \"/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 56\n            }, this) : /*#__PURE__*/_jsxDEV(LogIn, {\n              onLoginSuccess: handleLoginSuccess\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 78\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/UploadAndDiagnosis\",\n            element: /*#__PURE__*/_jsxDEV(UploadAndDiagnosis, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 56\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/signup\",\n            element: isLoggedIn ? /*#__PURE__*/_jsxDEV(Navigate, {\n              to: \"/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 57\n            }, this) : /*#__PURE__*/_jsxDEV(SignUp, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 79\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/forgot-password\",\n            element: isLoggedIn ? /*#__PURE__*/_jsxDEV(Navigate, {\n              to: \"/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 66\n            }, this) : /*#__PURE__*/_jsxDEV(ForgotPassword, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 88\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/verify-otp\",\n            element: isLoggedIn ? /*#__PURE__*/_jsxDEV(Navigate, {\n              to: \"/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 61\n            }, this) : /*#__PURE__*/_jsxDEV(OTPVerification, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 83\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/reset-password\",\n            element: isLoggedIn ? /*#__PURE__*/_jsxDEV(Navigate, {\n              to: \"/\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 65\n            }, this) : /*#__PURE__*/_jsxDEV(ResetPassword, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 87\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/profile\",\n            element: isLoggedIn ? /*#__PURE__*/_jsxDEV(Profile, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 58\n            }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n              to: \"/login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 72\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"*\",\n            element: /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 38\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6XovRI2vybcB/6l9xxdmRBpTm1w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","createContext","Routes","Route","Navigate","axios","SignUp","LogIn","Home","Profile","Error","UploadAndDiagnosis","ForgotPassword","ResetPassword","OTPVerification","jsxDEV","_jsxDEV","IsLoggedInContext","SetIsLoggedInContext","App","_s","isLoggedIn","setIsLoggedIn","loading","setLoading","handleLoginSuccess","token","localStorage","setItem","getItem","get","headers","Authorization","then","res","data","user","removeItem","catch","err","console","log","finally","handleLogout","children","Provider","value","path","element","to","fileName","_jsxFileName","lineNumber","columnNumber","onLoginSuccess","_c","$RefreshReg$"],"sources":["C:/Users/chama/OneDrive/Desktop/plantdiseasedetection1/Frontend/src/App.js"],"sourcesContent":["// import { useState, useEffect, createContext } from 'react';\n// import SignUp from './Components/SignUp.jsx';\n// import LogIn from './Components/LogIn.jsx';\n// import Error from './Components/Error.jsx';\n// import Home from './Components/Home.jsx';\n// import Profile from './Components/Profile.jsx';\n// import OTPVerification from './Components/OTPVerification.jsx';\n// import UploadAndDiagnosis from './Components/UploadAndDiagnosis.jsx';\n// import ForgotPassword from './Components/ForgotPassword.jsx';\n// import ResetPassword from './Components/ResetPassword.jsx';\n// import useAuth from './hooks/useAuth.js';\n// import { Navigate, Routes, Route } from 'react-router-dom';\n// import axios from 'axios';\n\n// export const IsLoggedInContext = createContext();\n// export const SetIsLoggedInContext = createContext();\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const storedLoginStatus = localStorage.getItem('isLoggedIn');\n    \n//     if (storedLoginStatus === 'true') {\n//       setIsLoggedIn(true);\n//       setLoading(false);  // Set loading to false immediately if logged in\n//     } else {\n//       axios.get('http://localhost:8080/user', { withCredentials: true })\n//         .then((res) => {\n//           console.log(res.data); // Log response to check the user data\n//           if (res.data.user) {\n//             setIsLoggedIn(true);\n//             localStorage.setItem('isLoggedIn', 'true'); // Store login status after successful response\n//           } else {\n//             setIsLoggedIn(false);\n//             localStorage.removeItem('isLoggedIn');\n//           }\n//         })\n//         .catch((err) => {\n//           setIsLoggedIn(false);\n//           localStorage.removeItem('isLoggedIn');\n//           console.log(err);\n//         })\n//         .finally(() => setLoading(false));  // Set loading to false after API call\n//     }\n//   }, []);\n\n//   const handleLogout = async () => {\n//     try {\n//       await axios.get('http://localhost:8080/logout', { withCredentials: true });\n//       setIsLoggedIn(false);\n//       localStorage.removeItem('isLoggedIn');\n//     } catch (err) {\n//       console.log('Error logging out:', err);\n//     } finally {\n//       setLoading(false);  // Set loading to false after logout\n//     }\n//   };\n\n//   if (loading) return null; // You could also return a loading spinner here\n\n//   return (\n//     <div>\n//       <IsLoggedInContext.Provider value={isLoggedIn}>\n//         <SetIsLoggedInContext.Provider value={setIsLoggedIn}>\n//           <Routes>\n//             <Route path=\"/\" element={<Navigate to=\"/home\" />} />\n//             <Route path=\"/home\" element={<Home />} />\n//             <Route path=\"/login\" element={isLoggedIn ? <Navigate to=\"/\" /> : <LogIn />} />\n//             <Route path=\"/UploadAndDiagnosis\" element={<UploadAndDiagnosis />} />\n//             <Route path=\"/signup\" element={isLoggedIn ? <Navigate to=\"/\" /> : <SignUp />} />\n//             <Route path=\"/forgot-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ForgotPassword />} />\n//             <Route path=\"/verify-otp\" element={isLoggedIn ? <Navigate to=\"/\" /> : <OTPVerification />} />\n//             <Route path=\"/reset-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ResetPassword />} />\n//             <Route path=\"/profile\" element={isLoggedIn ? <Profile /> : <Navigate to=\"/login\" />} />\n//             <Route path=\"*\" element={<Error />} />\n//           </Routes>\n//         </SetIsLoggedInContext.Provider>\n//       </IsLoggedInContext.Provider>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import { useState, useEffect, createContext } from 'react';\n// import { Routes, Route, Navigate } from 'react-router-dom';\n// import axios from 'axios';\n// import SignUp from './Components/SignUp.jsx';\n// import LogIn from './Components/LogIn.jsx';\n// import Home from './Components/Home.jsx';\n// import Profile from './Components/Profile.jsx';\n// import Error from './Components/Error.jsx';\n// import UploadAndDiagnosis from './Components/UploadAndDiagnosis.jsx';\n// import ForgotPassword from './Components/ForgotPassword.jsx';\n// import ResetPassword from './Components/ResetPassword.jsx';\n// import OTPVerification from './Components/OTPVerification.jsx';\n\n// export const IsLoggedInContext = createContext();\n// export const SetIsLoggedInContext = createContext();\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [loading, setLoading] = useState(true);\n\n//   // This function is passed to LogIn component to update the login state after a successful login\n//   const handleLoginSuccess = () => {\n//     setIsLoggedIn(true);\n//     localStorage.setItem('isLoggedIn', 'true');\n//   };\n\n//   useEffect(() => {\n//     // Initialize the login state from localStorage when the app first loads\n//     const storedLoginStatus = localStorage.getItem('isLoggedIn');\n//     if (storedLoginStatus === 'true') {\n//       setIsLoggedIn(true);\n//       setLoading(false);\n//     } else {\n//       axios.get('http://localhost:8080/user', { withCredentials: true })\n//         .then((res) => {\n//           if (res.data.user) {\n//             setIsLoggedIn(true);\n//             localStorage.setItem('isLoggedIn', 'true');\n//           } else {\n//             setIsLoggedIn(false);\n//             localStorage.removeItem('isLoggedIn');\n//           }\n//         })\n//         .catch((err) => {\n//           setIsLoggedIn(false);\n//           localStorage.removeItem('isLoggedIn');\n//           console.log(err);\n//         })\n//         .finally(() => setLoading(false));\n//     }\n//   }, []);\n\n//   // This function handles logging out the user\n//   const handleLogout = async () => {\n//     try {\n//       await axios.get('http://localhost:8080/logout', { withCredentials: true });\n//       setIsLoggedIn(false);\n//       localStorage.removeItem('isLoggedIn');\n//     } catch (err) {\n//       console.log('Error logging out:', err);\n//     }\n//   };\n\n//   if (loading) return null; // You could also return a loading spinner here\n\n//   return (\n//     <div>\n//       <IsLoggedInContext.Provider value={isLoggedIn}>\n//         <SetIsLoggedInContext.Provider value={setIsLoggedIn}>\n//           <Routes>\n//             <Route path=\"/\" element={<Navigate to=\"/home\" />} />\n//             <Route path=\"/home\" element={<Home />} />\n//             <Route path=\"/login\" element={isLoggedIn ? <Navigate to=\"/\" /> : <LogIn onLoginSuccess={handleLoginSuccess} />} />\n//             <Route path=\"/UploadAndDiagnosis\" element={<UploadAndDiagnosis />} />\n//             <Route path=\"/signup\" element={isLoggedIn ? <Navigate to=\"/\" /> : <SignUp />} />\n//             <Route path=\"/forgot-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ForgotPassword />} />\n//             <Route path=\"/verify-otp\" element={isLoggedIn ? <Navigate to=\"/\" /> : <OTPVerification />} />\n//             <Route path=\"/reset-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ResetPassword />} />\n//             <Route path=\"/profile\" element={isLoggedIn ? <Profile /> : <Navigate to=\"/login\" />} />\n//             <Route path=\"*\" element={<Error />} />\n//           </Routes>\n//         </SetIsLoggedInContext.Provider>\n//       </IsLoggedInContext.Provider>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport { useState, useEffect, createContext } from 'react';\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport axios from 'axios';\nimport SignUp from './Components/SignUp.jsx';\nimport LogIn from './Components/LogIn.jsx';\nimport Home from './Components/Home.jsx';\nimport Profile from './Components/Profile.jsx';\nimport Error from './Components/Error.jsx';\nimport UploadAndDiagnosis from './Components/UploadAndDiagnosis.jsx';\nimport ForgotPassword from './Components/ForgotPassword.jsx';\nimport ResetPassword from './Components/ResetPassword.jsx';\nimport OTPVerification from './Components/OTPVerification.jsx';\n\nexport const IsLoggedInContext = createContext();\nexport const SetIsLoggedInContext = createContext();\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Update login state and store token after a successful login\n  const handleLoginSuccess = (token) => {\n    localStorage.setItem('token', token); // Store the token\n    setIsLoggedIn(true);\n  };\n\n  useEffect(() => {\n    // Check if a token exists in localStorage to set login state\n    const token = localStorage.getItem('token');\n    if (token) {\n      axios.get('http://localhost:8080/user', {\n        headers: { Authorization: `Bearer ${token}` }, // Include token in headers\n      })\n        .then((res) => {\n          if (res.data.user) {\n            setIsLoggedIn(true);\n          } else {\n            setIsLoggedIn(false);\n            localStorage.removeItem('token');\n          }\n        })\n        .catch((err) => {\n          setIsLoggedIn(false);\n          localStorage.removeItem('token');\n          console.log('User verification failed:', err);\n        })\n        .finally(() => setLoading(false));\n    } else {\n      setLoading(false); // No token means user is logged out\n    }\n  }, []);\n\n  // Function to log out the user and clear token\n  const handleLogout = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.get('http://localhost:8080/logout', {\n        headers: { Authorization: `Bearer ${token}` },\n      });\n      setIsLoggedIn(false);\n      localStorage.removeItem('token'); // Clear token on logout\n    } catch (err) {\n      console.log('Error logging out:', err);\n    }\n  };\n\n  if (loading) return null; // Optionally, render a loading spinner here\n\n  return (\n    <div>\n      <IsLoggedInContext.Provider value={isLoggedIn}>\n        <SetIsLoggedInContext.Provider value={setIsLoggedIn}>\n          <Routes>\n            <Route path=\"/\" element={<Navigate to=\"/home\" />} />\n            <Route path=\"/home\" element={<Home />} />\n            <Route path=\"/login\" element={isLoggedIn ? <Navigate to=\"/\" /> : <LogIn onLoginSuccess={handleLoginSuccess} />} />\n            <Route path=\"/UploadAndDiagnosis\" element={<UploadAndDiagnosis />} />\n            <Route path=\"/signup\" element={isLoggedIn ? <Navigate to=\"/\" /> : <SignUp />} />\n            <Route path=\"/forgot-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ForgotPassword />} />\n            <Route path=\"/verify-otp\" element={isLoggedIn ? <Navigate to=\"/\" /> : <OTPVerification />} />\n            <Route path=\"/reset-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ResetPassword />} />\n            <Route path=\"/profile\" element={isLoggedIn ? <Profile /> : <Navigate to=\"/login\" />} />\n            <Route path=\"*\" element={<Error />} />\n          </Routes>\n        </SetIsLoggedInContext.Provider>\n      </IsLoggedInContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,aAAa,QAAQ,OAAO;AAC1D,SAASC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,KAAK,MAAM,wBAAwB;AAC1C,OAAOC,IAAI,MAAM,uBAAuB;AACxC,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,OAAOC,KAAK,MAAM,wBAAwB;AAC1C,OAAOC,kBAAkB,MAAM,qCAAqC;AACpE,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,aAAa,MAAM,gCAAgC;AAC1D,OAAOC,eAAe,MAAM,kCAAkC;AAAC,S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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}