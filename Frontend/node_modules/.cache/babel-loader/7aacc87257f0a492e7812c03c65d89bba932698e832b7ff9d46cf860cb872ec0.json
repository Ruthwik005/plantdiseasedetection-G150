{"ast":null,"code":"// import { useState, useEffect, createContext } from 'react';\n// import SignUp from './Components/SignUp.jsx';\n// import LogIn from './Components/LogIn.jsx';\n// import Error from './Components/Error.jsx';\n// import Home from './Components/Home.jsx';\n// import Profile from './Components/Profile.jsx';\n// import OTPVerification from './Components/OTPVerification.jsx';\n// import UploadAndDiagnosis from './Components/UploadAndDiagnosis.jsx';\n// import ForgotPassword from './Components/ForgotPassword.jsx';\n// import ResetPassword from './Components/ResetPassword.jsx';\n// import useAuth from './hooks/useAuth.js';\n// import { Navigate, Routes, Route } from 'react-router-dom';\n// import axios from 'axios';\n\n// export const IsLoggedInContext = createContext();\n// export const SetIsLoggedInContext = createContext();\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const storedLoginStatus = localStorage.getItem('isLoggedIn');\n\n//     if (storedLoginStatus === 'true') {\n//       setIsLoggedIn(true);\n//       setLoading(false);  // Set loading to false immediately if logged in\n//     } else {\n//       axios.get('http://localhost:8080/user', { withCredentials: true })\n//         .then((res) => {\n//           console.log(res.data); // Log response to check the user data\n//           if (res.data.user) {\n//             setIsLoggedIn(true);\n//             localStorage.setItem('isLoggedIn', 'true'); // Store login status after successful response\n//           } else {\n//             setIsLoggedIn(false);\n//             localStorage.removeItem('isLoggedIn');\n//           }\n//         })\n//         .catch((err) => {\n//           setIsLoggedIn(false);\n//           localStorage.removeItem('isLoggedIn');\n//           console.log(err);\n//         })\n//         .finally(() => setLoading(false));  // Set loading to false after API call\n//     }\n//   }, []);\n\n//   const handleLogout = async () => {\n//     try {\n//       await axios.get('http://localhost:8080/logout', { withCredentials: true });\n//       setIsLoggedIn(false);\n//       localStorage.removeItem('isLoggedIn');\n//     } catch (err) {\n//       console.log('Error logging out:', err);\n//     } finally {\n//       setLoading(false);  // Set loading to false after logout\n//     }\n//   };\n\n//   if (loading) return null; // You could also return a loading spinner here\n\n//   return (\n//     <div>\n//       <IsLoggedInContext.Provider value={isLoggedIn}>\n//         <SetIsLoggedInContext.Provider value={setIsLoggedIn}>\n//           <Routes>\n//             <Route path=\"/\" element={<Navigate to=\"/home\" />} />\n//             <Route path=\"/home\" element={<Home />} />\n//             <Route path=\"/login\" element={isLoggedIn ? <Navigate to=\"/\" /> : <LogIn />} />\n//             <Route path=\"/UploadAndDiagnosis\" element={<UploadAndDiagnosis />} />\n//             <Route path=\"/signup\" element={isLoggedIn ? <Navigate to=\"/\" /> : <SignUp />} />\n//             <Route path=\"/forgot-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ForgotPassword />} />\n//             <Route path=\"/verify-otp\" element={isLoggedIn ? <Navigate to=\"/\" /> : <OTPVerification />} />\n//             <Route path=\"/reset-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ResetPassword />} />\n//             <Route path=\"/profile\" element={isLoggedIn ? <Profile /> : <Navigate to=\"/login\" />} />\n//             <Route path=\"*\" element={<Error />} />\n//           </Routes>\n//         </SetIsLoggedInContext.Provider>\n//       </IsLoggedInContext.Provider>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import { useState, useEffect, createContext } from 'react';\n// import { Routes, Route, Navigate } from 'react-router-dom';\n// import axios from 'axios';\n// import SignUp from './Components/SignUp.jsx';\n// import LogIn from './Components/LogIn.jsx';\n// import Home from './Components/Home.jsx';\n// import Profile from './Components/Profile.jsx';\n// import Error from './Components/Error.jsx';\n// import UploadAndDiagnosis from './Components/UploadAndDiagnosis.jsx';\n// import ForgotPassword from './Components/ForgotPassword.jsx';\n// import ResetPassword from './Components/ResetPassword.jsx';\n// import OTPVerification from './Components/OTPVerification.jsx';\n\n// export const IsLoggedInContext = createContext();\n// export const SetIsLoggedInContext = createContext();\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [loading, setLoading] = useState(true);\n\n//   // This function is passed to LogIn component to update the login state after a successful login\n//   const handleLoginSuccess = () => {\n//     setIsLoggedIn(true);\n//     localStorage.setItem('isLoggedIn', 'true');\n//   };\n\n//   useEffect(() => {\n//     // Initialize the login state from localStorage when the app first loads\n//     const storedLoginStatus = localStorage.getItem('isLoggedIn');\n//     if (storedLoginStatus === 'true') {\n//       setIsLoggedIn(true);\n//       setLoading(false);\n//     } else {\n//       axios.get('http://localhost:8080/user', { withCredentials: true })\n//         .then((res) => {\n//           if (res.data.user) {\n//             setIsLoggedIn(true);\n//             localStorage.setItem('isLoggedIn', 'true');\n//           } else {\n//             setIsLoggedIn(false);\n//             localStorage.removeItem('isLoggedIn');\n//           }\n//         })\n//         .catch((err) => {\n//           setIsLoggedIn(false);\n//           localStorage.removeItem('isLoggedIn');\n//           console.log(err);\n//         })\n//         .finally(() => setLoading(false));\n//     }\n//   }, []);\n\n//   // This function handles logging out the user\n//   const handleLogout = async () => {\n//     try {\n//       await axios.get('http://localhost:8080/logout', { withCredentials: true });\n//       setIsLoggedIn(false);\n//       localStorage.removeItem('isLoggedIn');\n//     } catch (err) {\n//       console.log('Error logging out:', err);\n//     }\n//   };\n\n//   if (loading) return null; // You could also return a loading spinner here\n\n//   return (\n//     <div>\n//       <IsLoggedInContext.Provider value={isLoggedIn}>\n//         <SetIsLoggedInContext.Provider value={setIsLoggedIn}>\n//           <Routes>\n//             <Route path=\"/\" element={<Navigate to=\"/home\" />} />\n//             <Route path=\"/home\" element={<Home />} />\n//             <Route path=\"/login\" element={isLoggedIn ? <Navigate to=\"/\" /> : <LogIn onLoginSuccess={handleLoginSuccess} />} />\n//             <Route path=\"/UploadAndDiagnosis\" element={<UploadAndDiagnosis />} />\n//             <Route path=\"/signup\" element={isLoggedIn ? <Navigate to=\"/\" /> : <SignUp />} />\n//             <Route path=\"/forgot-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ForgotPassword />} />\n//             <Route path=\"/verify-otp\" element={isLoggedIn ? <Navigate to=\"/\" /> : <OTPVerification />} />\n//             <Route path=\"/reset-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ResetPassword />} />\n//             <Route path=\"/profile\" element={isLoggedIn ? <Profile /> : <Navigate to=\"/login\" />} />\n//             <Route path=\"*\" element={<Error />} />\n//           </Routes>\n//         </SetIsLoggedInContext.Provider>\n//       </IsLoggedInContext.Provider>\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/chama/OneDrive/Desktop/plantdiseasedetection1/Frontend/src/App.js"],"sourcesContent":["// import { useState, useEffect, createContext } from 'react';\n// import SignUp from './Components/SignUp.jsx';\n// import LogIn from './Components/LogIn.jsx';\n// import Error from './Components/Error.jsx';\n// import Home from './Components/Home.jsx';\n// import Profile from './Components/Profile.jsx';\n// import OTPVerification from './Components/OTPVerification.jsx';\n// import UploadAndDiagnosis from './Components/UploadAndDiagnosis.jsx';\n// import ForgotPassword from './Components/ForgotPassword.jsx';\n// import ResetPassword from './Components/ResetPassword.jsx';\n// import useAuth from './hooks/useAuth.js';\n// import { Navigate, Routes, Route } from 'react-router-dom';\n// import axios from 'axios';\n\n// export const IsLoggedInContext = createContext();\n// export const SetIsLoggedInContext = createContext();\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [loading, setLoading] = useState(true);\n\n//   useEffect(() => {\n//     const storedLoginStatus = localStorage.getItem('isLoggedIn');\n    \n//     if (storedLoginStatus === 'true') {\n//       setIsLoggedIn(true);\n//       setLoading(false);  // Set loading to false immediately if logged in\n//     } else {\n//       axios.get('http://localhost:8080/user', { withCredentials: true })\n//         .then((res) => {\n//           console.log(res.data); // Log response to check the user data\n//           if (res.data.user) {\n//             setIsLoggedIn(true);\n//             localStorage.setItem('isLoggedIn', 'true'); // Store login status after successful response\n//           } else {\n//             setIsLoggedIn(false);\n//             localStorage.removeItem('isLoggedIn');\n//           }\n//         })\n//         .catch((err) => {\n//           setIsLoggedIn(false);\n//           localStorage.removeItem('isLoggedIn');\n//           console.log(err);\n//         })\n//         .finally(() => setLoading(false));  // Set loading to false after API call\n//     }\n//   }, []);\n\n//   const handleLogout = async () => {\n//     try {\n//       await axios.get('http://localhost:8080/logout', { withCredentials: true });\n//       setIsLoggedIn(false);\n//       localStorage.removeItem('isLoggedIn');\n//     } catch (err) {\n//       console.log('Error logging out:', err);\n//     } finally {\n//       setLoading(false);  // Set loading to false after logout\n//     }\n//   };\n\n//   if (loading) return null; // You could also return a loading spinner here\n\n//   return (\n//     <div>\n//       <IsLoggedInContext.Provider value={isLoggedIn}>\n//         <SetIsLoggedInContext.Provider value={setIsLoggedIn}>\n//           <Routes>\n//             <Route path=\"/\" element={<Navigate to=\"/home\" />} />\n//             <Route path=\"/home\" element={<Home />} />\n//             <Route path=\"/login\" element={isLoggedIn ? <Navigate to=\"/\" /> : <LogIn />} />\n//             <Route path=\"/UploadAndDiagnosis\" element={<UploadAndDiagnosis />} />\n//             <Route path=\"/signup\" element={isLoggedIn ? <Navigate to=\"/\" /> : <SignUp />} />\n//             <Route path=\"/forgot-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ForgotPassword />} />\n//             <Route path=\"/verify-otp\" element={isLoggedIn ? <Navigate to=\"/\" /> : <OTPVerification />} />\n//             <Route path=\"/reset-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ResetPassword />} />\n//             <Route path=\"/profile\" element={isLoggedIn ? <Profile /> : <Navigate to=\"/login\" />} />\n//             <Route path=\"*\" element={<Error />} />\n//           </Routes>\n//         </SetIsLoggedInContext.Provider>\n//       </IsLoggedInContext.Provider>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import { useState, useEffect, createContext } from 'react';\n// import { Routes, Route, Navigate } from 'react-router-dom';\n// import axios from 'axios';\n// import SignUp from './Components/SignUp.jsx';\n// import LogIn from './Components/LogIn.jsx';\n// import Home from './Components/Home.jsx';\n// import Profile from './Components/Profile.jsx';\n// import Error from './Components/Error.jsx';\n// import UploadAndDiagnosis from './Components/UploadAndDiagnosis.jsx';\n// import ForgotPassword from './Components/ForgotPassword.jsx';\n// import ResetPassword from './Components/ResetPassword.jsx';\n// import OTPVerification from './Components/OTPVerification.jsx';\n\n// export const IsLoggedInContext = createContext();\n// export const SetIsLoggedInContext = createContext();\n\n// function App() {\n//   const [isLoggedIn, setIsLoggedIn] = useState(false);\n//   const [loading, setLoading] = useState(true);\n\n//   // This function is passed to LogIn component to update the login state after a successful login\n//   const handleLoginSuccess = () => {\n//     setIsLoggedIn(true);\n//     localStorage.setItem('isLoggedIn', 'true');\n//   };\n\n//   useEffect(() => {\n//     // Initialize the login state from localStorage when the app first loads\n//     const storedLoginStatus = localStorage.getItem('isLoggedIn');\n//     if (storedLoginStatus === 'true') {\n//       setIsLoggedIn(true);\n//       setLoading(false);\n//     } else {\n//       axios.get('http://localhost:8080/user', { withCredentials: true })\n//         .then((res) => {\n//           if (res.data.user) {\n//             setIsLoggedIn(true);\n//             localStorage.setItem('isLoggedIn', 'true');\n//           } else {\n//             setIsLoggedIn(false);\n//             localStorage.removeItem('isLoggedIn');\n//           }\n//         })\n//         .catch((err) => {\n//           setIsLoggedIn(false);\n//           localStorage.removeItem('isLoggedIn');\n//           console.log(err);\n//         })\n//         .finally(() => setLoading(false));\n//     }\n//   }, []);\n\n//   // This function handles logging out the user\n//   const handleLogout = async () => {\n//     try {\n//       await axios.get('http://localhost:8080/logout', { withCredentials: true });\n//       setIsLoggedIn(false);\n//       localStorage.removeItem('isLoggedIn');\n//     } catch (err) {\n//       console.log('Error logging out:', err);\n//     }\n//   };\n\n//   if (loading) return null; // You could also return a loading spinner here\n\n//   return (\n//     <div>\n//       <IsLoggedInContext.Provider value={isLoggedIn}>\n//         <SetIsLoggedInContext.Provider value={setIsLoggedIn}>\n//           <Routes>\n//             <Route path=\"/\" element={<Navigate to=\"/home\" />} />\n//             <Route path=\"/home\" element={<Home />} />\n//             <Route path=\"/login\" element={isLoggedIn ? <Navigate to=\"/\" /> : <LogIn onLoginSuccess={handleLoginSuccess} />} />\n//             <Route path=\"/UploadAndDiagnosis\" element={<UploadAndDiagnosis />} />\n//             <Route path=\"/signup\" element={isLoggedIn ? <Navigate to=\"/\" /> : <SignUp />} />\n//             <Route path=\"/forgot-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ForgotPassword />} />\n//             <Route path=\"/verify-otp\" element={isLoggedIn ? <Navigate to=\"/\" /> : <OTPVerification />} />\n//             <Route path=\"/reset-password\" element={isLoggedIn ? <Navigate to=\"/\" /> : <ResetPassword />} />\n//             <Route path=\"/profile\" element={isLoggedIn ? <Profile /> : <Navigate to=\"/login\" />} />\n//             <Route path=\"*\" element={<Error />} />\n//           </Routes>\n//         </SetIsLoggedInContext.Provider>\n//       </IsLoggedInContext.Provider>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}