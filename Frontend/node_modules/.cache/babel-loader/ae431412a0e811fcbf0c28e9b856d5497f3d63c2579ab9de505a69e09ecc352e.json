{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function Profile() {\n//   const [userInfo, setUserInfo] = useState(null);\n//   const [diagnosisHistory, setDiagnosisHistory] = useState([]);\n\n//   // Fetch user info\n//   const fetchUserInfo = () => {\n//     const userInfoString = localStorage.getItem('loggedInUser'); // Retrieve user info from localStorage\n//     if (userInfoString) {\n//       setUserInfo(userInfoString); // No need to parse it if it's a plain string\n//     }\n//   };\n\n//   // Fetch diagnosis history\n//   const fetchDiagnosisHistory = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:8080/user/diagnosis-history', { withCredentials: true });\n//       setDiagnosisHistory(response.data.diagnosisHistory); // Assuming the response contains the diagnosis history\n//       console.log(response.data.diagnosisHistory);\n//     } catch (error) {\n//       console.error('Error fetching diagnosis history:', error);\n//     }\n//   };\n\n//   // useEffect to fetch data on component mount\n//   useEffect(() => {\n//     fetchUserInfo();\n//     fetchDiagnosisHistory();\n//   }, []); // Empty array ensures it runs only once when component mounts\n\n//   // Function to update diagnosis history after a new diagnosis\n//   const addNewDiagnosis = (newDiagnosis) => {\n//     // Optionally, you can optimistically update the state before the fetch\n//     setDiagnosisHistory((prevHistory) => [newDiagnosis, ...prevHistory]); // Add new diagnosis at the top\n\n//     // Re-fetch diagnosis history\n//     fetchDiagnosisHistory(); // Refetch after new diagnosis\n//   };\n\n//   return (\n//     <div className=\"profile-page\">\n//       <h1>Profile Page</h1>\n//       {userInfo ? (\n//         <div>\n//           <p><strong>Username:</strong> {userInfo}</p>\n\n//           {/* Display the diagnosis history */}\n//           <h2>Diagnosis History</h2>\n//           {diagnosisHistory.length > 0 ? (\n//             diagnosisHistory.map((diagnosis) => (\n//               <div key={diagnosis._id} style={styles.historyContainer}>\n//                 <div style={styles.imageContainer}>\n//                   {diagnosis.imageUrl && (\n//                     <img\n//                       src={diagnosis.imageUrl}\n//                       alt={diagnosis.diseaseName}\n//                       style={styles.image}\n//                     />\n//                   )}\n//                 </div>\n//                 <div style={styles.textContainer}>\n//                   <p><strong>Disease:</strong> {diagnosis.diseaseName}</p>\n//                   <p><strong>Date:</strong> {formatDate(diagnosis.createdAt)}</p>\n//                 </div>\n//               </div>\n//             ))\n//           ) : (\n//             <p>No diagnosis history available.</p>\n//           )}\n//         </div>\n//       ) : (\n//         <p>No user information available. Please log in.</p>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Profile;","map":{"version":3,"names":[],"sources":["C:/Users/chama/OneDrive/Desktop/plantdiseasedetection1/Frontend/src/Components/Profile.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// function Profile() {\r\n//   const [userInfo, setUserInfo] = useState(null);\r\n//   const [diagnosisHistory, setDiagnosisHistory] = useState([]);\r\n\r\n//   // Fetch user info\r\n//   const fetchUserInfo = () => {\r\n//     const userInfoString = localStorage.getItem('loggedInUser'); // Retrieve user info from localStorage\r\n//     if (userInfoString) {\r\n//       setUserInfo(userInfoString); // No need to parse it if it's a plain string\r\n//     }\r\n//   };\r\n\r\n//   // Fetch diagnosis history\r\n//   const fetchDiagnosisHistory = async () => {\r\n//     try {\r\n//       const response = await axios.get('http://localhost:8080/user/diagnosis-history', { withCredentials: true });\r\n//       setDiagnosisHistory(response.data.diagnosisHistory); // Assuming the response contains the diagnosis history\r\n//       console.log(response.data.diagnosisHistory);\r\n//     } catch (error) {\r\n//       console.error('Error fetching diagnosis history:', error);\r\n//     }\r\n//   };\r\n\r\n//   // useEffect to fetch data on component mount\r\n//   useEffect(() => {\r\n//     fetchUserInfo();\r\n//     fetchDiagnosisHistory();\r\n//   }, []); // Empty array ensures it runs only once when component mounts\r\n\r\n//   // Function to update diagnosis history after a new diagnosis\r\n//   const addNewDiagnosis = (newDiagnosis) => {\r\n//     // Optionally, you can optimistically update the state before the fetch\r\n//     setDiagnosisHistory((prevHistory) => [newDiagnosis, ...prevHistory]); // Add new diagnosis at the top\r\n\r\n//     // Re-fetch diagnosis history\r\n//     fetchDiagnosisHistory(); // Refetch after new diagnosis\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"profile-page\">\r\n//       <h1>Profile Page</h1>\r\n//       {userInfo ? (\r\n//         <div>\r\n//           <p><strong>Username:</strong> {userInfo}</p>\r\n\r\n//           {/* Display the diagnosis history */}\r\n//           <h2>Diagnosis History</h2>\r\n//           {diagnosisHistory.length > 0 ? (\r\n//             diagnosisHistory.map((diagnosis) => (\r\n//               <div key={diagnosis._id} style={styles.historyContainer}>\r\n//                 <div style={styles.imageContainer}>\r\n//                   {diagnosis.imageUrl && (\r\n//                     <img\r\n//                       src={diagnosis.imageUrl}\r\n//                       alt={diagnosis.diseaseName}\r\n//                       style={styles.image}\r\n//                     />\r\n//                   )}\r\n//                 </div>\r\n//                 <div style={styles.textContainer}>\r\n//                   <p><strong>Disease:</strong> {diagnosis.diseaseName}</p>\r\n//                   <p><strong>Date:</strong> {formatDate(diagnosis.createdAt)}</p>\r\n//                 </div>\r\n//               </div>\r\n//             ))\r\n//           ) : (\r\n//             <p>No diagnosis history available.</p>\r\n//           )}\r\n//         </div>\r\n//       ) : (\r\n//         <p>No user information available. Please log in.</p>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n// export default Profile;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}