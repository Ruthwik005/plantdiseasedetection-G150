{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chama\\\\OneDrive\\\\Desktop\\\\plantdiseasedetection1\\\\Frontend\\\\src\\\\Components\\\\Profile.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Profile() {\n  _s();\n  const [userInfo, setUserInfo] = useState(null);\n  const [diagnosisHistory, setDiagnosisHistory] = useState([]);\n  useEffect(() => {\n    const fetchUserInfo = () => {\n      const userInfoString = localStorage.getItem('loggedInUser'); // Retrieve user info from localStorage\n      if (userInfoString) {\n        setUserInfo(userInfoString); // No need to parse it if it's a plain string\n      }\n    };\n    const fetchDiagnosisHistory = async () => {\n      try {\n        const response = await axios.get('http://localhost:8080/user/diagnosis-history', {\n          withCredentials: true\n        });\n        setDiagnosisHistory(response.data.diagnosisHistory); // Assuming the response contains the diagnosis history\n      } catch (error) {\n        console.error('Error fetching diagnosis history:', error);\n      }\n    };\n    fetchUserInfo();\n    fetchDiagnosisHistory();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Profile Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), userInfo ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 14\n        }, this), \" \", userInfo]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Diagnosis History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), diagnosisHistory.length > 0 ? diagnosisHistory.map(diagnosis => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.historyContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.imageContainer,\n          children: diagnosis.imageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: diagnosis.imageUrl,\n            alt: diagnosis.diseaseName,\n            style: styles.image\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.textContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Disease:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 22\n            }, this), \" \", diagnosis.diseaseName]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 22\n            }, this), \" \", formatDate(diagnosis.createdAt)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)]\n      }, diagnosis._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No diagnosis history available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No user information available. Please log in.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n// Function to format the date and time in 12-hour format with AM/PM\n_s(Profile, \"lymI/IJ/0TNJPgBOUaS8ZJjYQaQ=\");\n_c = Profile;\nconst formatDate = createdAt => {\n  const date = new Date(createdAt);\n  const dateString = date.toLocaleDateString(); // Format for the date (e.g., \"11/23/2024\")\n\n  // Format the time in 12-hour format with AM/PM\n  const timeOptions = {\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true\n  };\n  const timeString = date.toLocaleTimeString([], timeOptions); // e.g., \"3:45 PM\"\n\n  return `${dateString} at ${timeString}`;\n};\nconst styles = {\n  historyContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    marginBottom: '20px',\n    borderBottom: '1px solid #ddd',\n    paddingBottom: '10px'\n  },\n  imageContainer: {\n    marginRight: '20px' // Space between image and text\n  },\n  image: {\n    width: '100px',\n    // Adjust the image size here\n    height: '100px',\n    objectFit: 'cover',\n    // Keep aspect ratio intact\n    borderRadius: '8px' // Optional: rounds the image\n  },\n  textContainer: {\n    flex: 1 // Make the text container take the remaining space\n  }\n};\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Profile","_s","userInfo","setUserInfo","diagnosisHistory","setDiagnosisHistory","fetchUserInfo","userInfoString","localStorage","getItem","fetchDiagnosisHistory","response","get","withCredentials","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","diagnosis","style","styles","historyContainer","imageContainer","imageUrl","src","alt","diseaseName","image","textContainer","formatDate","createdAt","_id","_c","date","Date","dateString","toLocaleDateString","timeOptions","hour","minute","hour12","timeString","toLocaleTimeString","display","alignItems","marginBottom","borderBottom","paddingBottom","marginRight","width","height","objectFit","borderRadius","flex","$RefreshReg$"],"sources":["C:/Users/chama/OneDrive/Desktop/plantdiseasedetection1/Frontend/src/Components/Profile.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Profile() {\r\n  const [userInfo, setUserInfo] = useState(null);\r\n  const [diagnosisHistory, setDiagnosisHistory] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchUserInfo = () => {\r\n      const userInfoString = localStorage.getItem('loggedInUser'); // Retrieve user info from localStorage\r\n      if (userInfoString) {\r\n        setUserInfo(userInfoString); // No need to parse it if it's a plain string\r\n      }\r\n    };\r\n\r\n    const fetchDiagnosisHistory = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:8080/user/diagnosis-history', { withCredentials: true });\r\n        setDiagnosisHistory(response.data.diagnosisHistory); // Assuming the response contains the diagnosis history\r\n      } catch (error) {\r\n        console.error('Error fetching diagnosis history:', error);\r\n      }\r\n    };\r\n\r\n    fetchUserInfo();\r\n    fetchDiagnosisHistory();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"profile-page\">\r\n      <h1>Profile Page</h1>\r\n      {userInfo ? (\r\n        <div>\r\n          <p><strong>Username:</strong> {userInfo}</p>\r\n\r\n          {/* Display the diagnosis history */}\r\n          <h2>Diagnosis History</h2>\r\n          {diagnosisHistory.length > 0 ? (\r\n            diagnosisHistory.map((diagnosis) => (\r\n              <div key={diagnosis._id} style={styles.historyContainer}>\r\n                <div style={styles.imageContainer}>\r\n                  {diagnosis.imageUrl && (\r\n                    <img\r\n                      src={diagnosis.imageUrl}\r\n                      alt={diagnosis.diseaseName}\r\n                      style={styles.image}\r\n                    />\r\n                  )}\r\n                </div>\r\n                <div style={styles.textContainer}>\r\n                  <p><strong>Disease:</strong> {diagnosis.diseaseName}</p>\r\n                  <p><strong>Date:</strong> {formatDate(diagnosis.createdAt)}</p>\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p>No diagnosis history available.</p>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <p>No user information available. Please log in.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Function to format the date and time in 12-hour format with AM/PM\r\nconst formatDate = (createdAt) => {\r\n  const date = new Date(createdAt);\r\n  const dateString = date.toLocaleDateString(); // Format for the date (e.g., \"11/23/2024\")\r\n  \r\n  // Format the time in 12-hour format with AM/PM\r\n  const timeOptions = { hour: '2-digit', minute: '2-digit', hour12: true };\r\n  const timeString = date.toLocaleTimeString([], timeOptions); // e.g., \"3:45 PM\"\r\n  \r\n  return `${dateString} at ${timeString}`;\r\n};\r\n\r\nconst styles = {\r\n  historyContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    marginBottom: '20px',\r\n    borderBottom: '1px solid #ddd',\r\n    paddingBottom: '10px',\r\n  },\r\n  imageContainer: {\r\n    marginRight: '20px', // Space between image and text\r\n  },\r\n  image: {\r\n    width: '100px', // Adjust the image size here\r\n    height: '100px',\r\n    objectFit: 'cover', // Keep aspect ratio intact\r\n    borderRadius: '8px', // Optional: rounds the image\r\n  },\r\n  textContainer: {\r\n    flex: 1, // Make the text container take the remaining space\r\n  }\r\n};\r\n\r\nexport default Profile;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}