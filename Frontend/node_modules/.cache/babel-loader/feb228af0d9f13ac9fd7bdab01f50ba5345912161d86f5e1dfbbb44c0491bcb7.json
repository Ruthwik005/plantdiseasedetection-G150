{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chama\\\\OneDrive\\\\Desktop\\\\plantdiseasedetection1\\\\Frontend\\\\src\\\\Components\\\\ResetPassword.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { useParams, useNavigate } from 'react-router-dom'; // To get token from URL and navigate\n// import './ResetPassword.css';\n\n// const ResetPassword = () => {\n//     const [newPassword, setNewPassword] = useState('');\n//     const [confirmPassword, setConfirmPassword] = useState('');\n//     const [message, setMessage] = useState('');\n//     const [submitted, setSubmitted] = useState(false);\n\n//     const { token } = useParams(); // Retrieve token from URL\n//     const navigate = useNavigate(); // To redirect after successful reset\n\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n\n//         // Validate that passwords match\n//         if (newPassword !== confirmPassword) {\n//             setMessage(\"Passwords do not match.\");\n//             return;\n//         }\n\n//         setSubmitted(true);\n\n//         try {\n//             // Send request to reset password with token and new password\n//             const res = await fetch(`http://localhost:3000/auth/reset-password/:${token}`, {\n//                 method: 'POST',\n//                 headers: { 'Content-Type': 'application/json' },\n//                 body: JSON.stringify({ newPassword })\n//             });\n//             const data = await res.json();\n\n//             if (res.ok) {\n//                 setMessage(\"Password has been reset successfully! Redirecting to login...\");\n//                 setTimeout(() => navigate('/login'), 3000); // Redirect after 3 seconds\n//             } else {\n//                 setMessage(data.error || 'Failed to reset password.');\n//                 setSubmitted(false);\n//             }\n//         } catch (error) {\n//             setMessage('Failed to reset password.');\n//             setSubmitted(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"reset-password-container\">\n//             <form onSubmit={handleSubmit} className=\"reset-password-form\">\n//                 <h2>Reset Password</h2>\n//                 <p>Enter a new password for your account.</p>\n\n//                 {/* Show success or error message */}\n//                 {message && <p className=\"message\">{message}</p>}\n\n//                 <input\n//                     type=\"password\"\n//                     placeholder=\"New Password\"\n//                     value={newPassword}\n//                     onChange={(e) => setNewPassword(e.target.value)}\n//                     required\n//                 />\n//                 <input\n//                     type=\"password\"\n//                     placeholder=\"Confirm New Password\"\n//                     value={confirmPassword}\n//                     onChange={(e) => setConfirmPassword(e.target.value)}\n//                     required\n//                 />\n\n//                 <button type=\"submit\" disabled={submitted}>\n//                     {submitted ? 'Resetting...' : 'Reset Password'}\n//                 </button>\n//             </form>\n//         </div>\n//     );\n// };\n\n// export default ResetPassword;\n\n// ResetPassword.jsx\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport './ResetPassword.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ResetPassword() {\n  _s();\n  const location = useLocation();\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n  const {\n    email\n  } = location.state;\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (newPassword !== confirmPassword) {\n      setMessage('Passwords do not match.');\n      return;\n    }\n    try {\n      const response = await axios.post('http://localhost:8080/reset-password', {\n        email,\n        newPassword\n      });\n      setMessage(response.data.message);\n      setTimeout(() => {\n        navigate('/login');\n      }, 1000);\n    } catch (error) {\n      setMessage(error.response.data.message || 'An error occurred');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: newPassword,\n        onChange: e => setNewPassword(e.target.value),\n        placeholder: \"New Password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        value: confirmPassword,\n        onChange: e => setConfirmPassword(e.target.value),\n        placeholder: \"Confirm New Password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}\n_s(ResetPassword, \"AkgYyVvhpAlNmQdKNcByOYf+6YE=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = ResetPassword;\nexport default ResetPassword;\nvar _c;\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"names":["React","useState","axios","useLocation","useNavigate","jsxDEV","_jsxDEV","ResetPassword","_s","location","newPassword","setNewPassword","confirmPassword","setConfirmPassword","message","setMessage","navigate","email","state","handleSubmit","e","preventDefault","response","post","data","setTimeout","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/chama/OneDrive/Desktop/plantdiseasedetection1/Frontend/src/Components/ResetPassword.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useParams, useNavigate } from 'react-router-dom'; // To get token from URL and navigate\r\n// import './ResetPassword.css';\r\n\r\n// const ResetPassword = () => {\r\n//     const [newPassword, setNewPassword] = useState('');\r\n//     const [confirmPassword, setConfirmPassword] = useState('');\r\n//     const [message, setMessage] = useState('');\r\n//     const [submitted, setSubmitted] = useState(false);\r\n\r\n//     const { token } = useParams(); // Retrieve token from URL\r\n//     const navigate = useNavigate(); // To redirect after successful reset\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n        \r\n//         // Validate that passwords match\r\n//         if (newPassword !== confirmPassword) {\r\n//             setMessage(\"Passwords do not match.\");\r\n//             return;\r\n//         }\r\n\r\n//         setSubmitted(true);\r\n\r\n//         try {\r\n//             // Send request to reset password with token and new password\r\n//             const res = await fetch(`http://localhost:3000/auth/reset-password/:${token}`, {\r\n//                 method: 'POST',\r\n//                 headers: { 'Content-Type': 'application/json' },\r\n//                 body: JSON.stringify({ newPassword })\r\n//             });\r\n//             const data = await res.json();\r\n\r\n//             if (res.ok) {\r\n//                 setMessage(\"Password has been reset successfully! Redirecting to login...\");\r\n//                 setTimeout(() => navigate('/login'), 3000); // Redirect after 3 seconds\r\n//             } else {\r\n//                 setMessage(data.error || 'Failed to reset password.');\r\n//                 setSubmitted(false);\r\n//             }\r\n//         } catch (error) {\r\n//             setMessage('Failed to reset password.');\r\n//             setSubmitted(false);\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"reset-password-container\">\r\n//             <form onSubmit={handleSubmit} className=\"reset-password-form\">\r\n//                 <h2>Reset Password</h2>\r\n//                 <p>Enter a new password for your account.</p>\r\n                \r\n//                 {/* Show success or error message */}\r\n//                 {message && <p className=\"message\">{message}</p>}\r\n                \r\n//                 <input\r\n//                     type=\"password\"\r\n//                     placeholder=\"New Password\"\r\n//                     value={newPassword}\r\n//                     onChange={(e) => setNewPassword(e.target.value)}\r\n//                     required\r\n//                 />\r\n//                 <input\r\n//                     type=\"password\"\r\n//                     placeholder=\"Confirm New Password\"\r\n//                     value={confirmPassword}\r\n//                     onChange={(e) => setConfirmPassword(e.target.value)}\r\n//                     required\r\n//                 />\r\n                \r\n//                 <button type=\"submit\" disabled={submitted}>\r\n//                     {submitted ? 'Resetting...' : 'Reset Password'}\r\n//                 </button>\r\n//             </form>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ResetPassword;\r\n\r\n// ResetPassword.jsx\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport './ResetPassword.css';\r\nfunction ResetPassword() {\r\n  const location = useLocation();\r\n  const [newPassword, setNewPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const navigate = useNavigate();\r\n  const { email } = location.state;\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (newPassword !== confirmPassword) {\r\n      setMessage('Passwords do not match.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.post('http://localhost:8080/reset-password', { email, newPassword });\r\n      setMessage(response.data.message);\r\n      setTimeout(() => {\r\n        navigate('/login');\r\n      }, 1000);\r\n    } catch (error) {\r\n      setMessage(error.response.data.message || 'An error occurred');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Reset Password</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"password\"\r\n          value={newPassword}\r\n          onChange={(e) => setNewPassword(e.target.value)}\r\n          placeholder=\"New Password\"\r\n          required\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          value={confirmPassword}\r\n          onChange={(e) => setConfirmPassword(e.target.value)}\r\n          placeholder=\"Confirm New Password\"\r\n          required\r\n        />\r\n        <button type=\"submit\">Reset Password</button>\r\n      </form>\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ResetPassword;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}